// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: insights.sql

package database

import (
	"context"
)

const getTotalFeesPaid = `-- name: GetTotalFeesPaid :one
SELECT COALESCE(SUM(paid), 0) AS total_fees_paid
FROM fees
`

func (q *Queries) GetTotalFeesPaid(ctx context.Context) (interface{}, error) {
	row := q.db.QueryRow(ctx, getTotalFeesPaid)
	var total_fees_paid interface{}
	err := row.Scan(&total_fees_paid)
	return total_fees_paid, err
}

const getTotalStudents = `-- name: GetTotalStudents :one
SELECT COUNT(*) AS total_students
FROM students
`

func (q *Queries) GetTotalStudents(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, getTotalStudents)
	var total_students int64
	err := row.Scan(&total_students)
	return total_students, err
}

const getTotalUsers = `-- name: GetTotalUsers :one
SELECT COUNT(*) AS total_users
FROM users
`

func (q *Queries) GetTotalUsers(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, getTotalUsers)
	var total_users int64
	err := row.Scan(&total_users)
	return total_users, err
}
