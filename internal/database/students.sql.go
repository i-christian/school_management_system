// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: students.sql

package database

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const deleteStudent = `-- name: DeleteStudent :exec
DELETE FROM students WHERE student_id = $1
`

func (q *Queries) DeleteStudent(ctx context.Context, studentID uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteStudent, studentID)
	return err
}

const editStudent = `-- name: EditStudent :exec
UPDATE students
SET last_name = COALESCE($2, last_name),
    first_name = COALESCE($3, first_name),
    middle_name = COALESCE($6, middle_name),
    gender = COALESCE($4, gender),
    date_of_birth = COALESCE($5, date_of_birth)
WHERE student_id = $1
`

type EditStudentParams struct {
	StudentID   uuid.UUID   `json:"student_id"`
	LastName    string      `json:"last_name"`
	FirstName   string      `json:"first_name"`
	Gender      string      `json:"gender"`
	DateOfBirth pgtype.Date `json:"date_of_birth"`
	MiddleName  pgtype.Text `json:"middle_name"`
}

func (q *Queries) EditStudent(ctx context.Context, arg EditStudentParams) error {
	_, err := q.db.Exec(ctx, editStudent,
		arg.StudentID,
		arg.LastName,
		arg.FirstName,
		arg.Gender,
		arg.DateOfBirth,
		arg.MiddleName,
	)
	return err
}

const getStudent = `-- name: GetStudent :one
SELECT DISTINCT ON (students.student_id)
    students.student_id,
    students.student_no,
    students.last_name,
    students.first_name,
    students.middle_name,
    students.gender,
    students.date_of_birth,
    students.status,
    academic_year.name AS AcademicYear,
    classes.name AS ClassName
FROM students
INNER JOIN academic_year
    ON students.academic_year_id = academic_year.academic_year_id
LEFT OUTER JOIN student_classes
    ON students.student_id = student_classes.student_id
LEFT OUTER JOIN classes
    ON student_classes.class_id = classes.class_id
WHERE students.student_id = $1
`

type GetStudentRow struct {
	StudentID    uuid.UUID   `json:"student_id"`
	StudentNo    string      `json:"student_no"`
	LastName     string      `json:"last_name"`
	FirstName    string      `json:"first_name"`
	MiddleName   pgtype.Text `json:"middle_name"`
	Gender       string      `json:"gender"`
	DateOfBirth  pgtype.Date `json:"date_of_birth"`
	Status       string      `json:"status"`
	Academicyear string      `json:"academicyear"`
	Classname    pgtype.Text `json:"classname"`
}

func (q *Queries) GetStudent(ctx context.Context, studentID uuid.UUID) (GetStudentRow, error) {
	row := q.db.QueryRow(ctx, getStudent, studentID)
	var i GetStudentRow
	err := row.Scan(
		&i.StudentID,
		&i.StudentNo,
		&i.LastName,
		&i.FirstName,
		&i.MiddleName,
		&i.Gender,
		&i.DateOfBirth,
		&i.Status,
		&i.Academicyear,
		&i.Classname,
	)
	return i, err
}

const insertStudent = `-- name: InsertStudent :one
INSERT INTO students (
    academic_year_id, 
    last_name, 
    first_name, 
    middle_name, 
    gender, 
    date_of_birth
)
VALUES
    ($1, $2, $3, $4, $5, $6)
ON CONFLICT (first_name, last_name, middle_name, date_of_birth, academic_year_id)
DO NOTHING
RETURNING student_id
`

type InsertStudentParams struct {
	AcademicYearID uuid.UUID   `json:"academic_year_id"`
	LastName       string      `json:"last_name"`
	FirstName      string      `json:"first_name"`
	MiddleName     pgtype.Text `json:"middle_name"`
	Gender         string      `json:"gender"`
	DateOfBirth    pgtype.Date `json:"date_of_birth"`
}

func (q *Queries) InsertStudent(ctx context.Context, arg InsertStudentParams) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, insertStudent,
		arg.AcademicYearID,
		arg.LastName,
		arg.FirstName,
		arg.MiddleName,
		arg.Gender,
		arg.DateOfBirth,
	)
	var student_id uuid.UUID
	err := row.Scan(&student_id)
	return student_id, err
}

const linkStudentGuardian = `-- name: LinkStudentGuardian :exec
INSERT INTO student_guardians (student_id, guardian_id)
VALUES ($1, $2)
ON CONFLICT (student_id, guardian_id) DO NOTHING
`

type LinkStudentGuardianParams struct {
	StudentID  uuid.UUID `json:"student_id"`
	GuardianID uuid.UUID `json:"guardian_id"`
}

func (q *Queries) LinkStudentGuardian(ctx context.Context, arg LinkStudentGuardianParams) error {
	_, err := q.db.Exec(ctx, linkStudentGuardian, arg.StudentID, arg.GuardianID)
	return err
}

const listStudents = `-- name: ListStudents :many
SELECT DISTINCT ON (students.student_id)
    students.student_id,
    students.student_no,
    students.last_name,
    students.first_name,
    students.gender,
    students.date_of_birth,
    students.status,
    academic_year.name AS AcademicYear,
    classes.name AS ClassName
FROM students
INNER JOIN academic_year
    ON students.academic_year_id = academic_year.academic_year_id
LEFT OUTER JOIN student_classes
    ON students.student_id = student_classes.student_id
LEFT OUTER JOIN classes
    ON student_classes.class_id = classes.class_id
ORDER BY students.student_id, students.last_name ASC
`

type ListStudentsRow struct {
	StudentID    uuid.UUID   `json:"student_id"`
	StudentNo    string      `json:"student_no"`
	LastName     string      `json:"last_name"`
	FirstName    string      `json:"first_name"`
	Gender       string      `json:"gender"`
	DateOfBirth  pgtype.Date `json:"date_of_birth"`
	Status       string      `json:"status"`
	Academicyear string      `json:"academicyear"`
	Classname    pgtype.Text `json:"classname"`
}

func (q *Queries) ListStudents(ctx context.Context) ([]ListStudentsRow, error) {
	rows, err := q.db.Query(ctx, listStudents)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListStudentsRow{}
	for rows.Next() {
		var i ListStudentsRow
		if err := rows.Scan(
			&i.StudentID,
			&i.StudentNo,
			&i.LastName,
			&i.FirstName,
			&i.Gender,
			&i.DateOfBirth,
			&i.Status,
			&i.Academicyear,
			&i.Classname,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const upsertGuardian = `-- name: UpsertGuardian :one
INSERT INTO guardians (
    guardian_name, 
    phone_number_1, 
    phone_number_2, 
    gender, 
    profession
)
VALUES
    ($1, $2, $3, $4, $5)
ON CONFLICT (phone_number_1, phone_number_2)
DO UPDATE
    SET guardian_name = EXCLUDED.guardian_name,
        gender = EXCLUDED.gender,
        profession = EXCLUDED.profession
RETURNING guardian_id
`

type UpsertGuardianParams struct {
	GuardianName string      `json:"guardian_name"`
	PhoneNumber1 pgtype.Text `json:"phone_number_1"`
	PhoneNumber2 pgtype.Text `json:"phone_number_2"`
	Gender       string      `json:"gender"`
	Profession   pgtype.Text `json:"profession"`
}

func (q *Queries) UpsertGuardian(ctx context.Context, arg UpsertGuardianParams) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, upsertGuardian,
		arg.GuardianName,
		arg.PhoneNumber1,
		arg.PhoneNumber2,
		arg.Gender,
		arg.Profession,
	)
	var guardian_id uuid.UUID
	err := row.Scan(&guardian_id)
	return guardian_id, err
}
