// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: students.sql

package database

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createStudent = `-- name: CreateStudent :one
INSERT INTO students (academic_year_id, last_name, first_name, gender, date_of_birth) 
VALUES ($1, $2, $3, $4, $5) 
RETURNING student_id, academic_year_id, last_name, first_name, gender, date_of_birth, status, promoted, graduated, suspended
`

type CreateStudentParams struct {
	AcademicYearID uuid.UUID   `json:"academic_year_id"`
	LastName       string      `json:"last_name"`
	FirstName      string      `json:"first_name"`
	Gender         string      `json:"gender"`
	DateOfBirth    pgtype.Date `json:"date_of_birth"`
}

func (q *Queries) CreateStudent(ctx context.Context, arg CreateStudentParams) (Student, error) {
	row := q.db.QueryRow(ctx, createStudent,
		arg.AcademicYearID,
		arg.LastName,
		arg.FirstName,
		arg.Gender,
		arg.DateOfBirth,
	)
	var i Student
	err := row.Scan(
		&i.StudentID,
		&i.AcademicYearID,
		&i.LastName,
		&i.FirstName,
		&i.Gender,
		&i.DateOfBirth,
		&i.Status,
		&i.Promoted,
		&i.Graduated,
		&i.Suspended,
	)
	return i, err
}

const deleteStudent = `-- name: DeleteStudent :exec
DELETE FROM students WHERE student_id = $1
`

func (q *Queries) DeleteStudent(ctx context.Context, studentID uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteStudent, studentID)
	return err
}

const editStudent = `-- name: EditStudent :exec
UPDATE students
SET academic_year_id = COALESCE($2, academic_year_id),
last_name = COALESCE($3, last_name),
first_name = COALESCE($4, first_name),
gender = COALESCE($5, gender),
date_of_birth = COALESCE($5, date_of_birth) 
WHERE student_id = $1
`

type EditStudentParams struct {
	StudentID      uuid.UUID `json:"student_id"`
	AcademicYearID uuid.UUID `json:"academic_year_id"`
	LastName       string    `json:"last_name"`
	FirstName      string    `json:"first_name"`
	Gender         string    `json:"gender"`
}

func (q *Queries) EditStudent(ctx context.Context, arg EditStudentParams) error {
	_, err := q.db.Exec(ctx, editStudent,
		arg.StudentID,
		arg.AcademicYearID,
		arg.LastName,
		arg.FirstName,
		arg.Gender,
	)
	return err
}

const getStudent = `-- name: GetStudent :one
SELECT
    students.student_id,
    students.last_name,
    students.first_name,
    students.gender,
    students.date_of_birth,
    students.status,
    academic_year.name AS AcademicYear,
    classes.name AS ClassName
FROM students
INNER JOIN academic_year
    ON students.academic_year_id = academic_year.academic_year_id
LEFT OUTER JOIN student_classes
    ON students.student_id = student_classes.student_id
LEFT OUTER JOIN classes
    ON student_classes.class_id = classes.class_id
WHERE students.student_id = $1
`

type GetStudentRow struct {
	StudentID    uuid.UUID   `json:"student_id"`
	LastName     string      `json:"last_name"`
	FirstName    string      `json:"first_name"`
	Gender       string      `json:"gender"`
	DateOfBirth  pgtype.Date `json:"date_of_birth"`
	Status       string      `json:"status"`
	Academicyear string      `json:"academicyear"`
	Classname    pgtype.Text `json:"classname"`
}

func (q *Queries) GetStudent(ctx context.Context, studentID uuid.UUID) (GetStudentRow, error) {
	row := q.db.QueryRow(ctx, getStudent, studentID)
	var i GetStudentRow
	err := row.Scan(
		&i.StudentID,
		&i.LastName,
		&i.FirstName,
		&i.Gender,
		&i.DateOfBirth,
		&i.Status,
		&i.Academicyear,
		&i.Classname,
	)
	return i, err
}

const listStudents = `-- name: ListStudents :many
SELECT
    students.student_id,
    students.last_name,
    students.first_name,
    students.gender,
    students.date_of_birth,
    students.status,
    academic_year.name AS AcademicYear,
    classes.name AS ClassName
FROM students
INNER JOIN academic_year
    ON students.academic_year_id = academic_year.academic_year_id
LEFT OUTER JOIN student_classes
    ON students.student_id = student_classes.student_id
LEFT OUTER JOIN classes
    ON student_classes.class_id = classes.class_id
ORDER BY students.last_name ASC, students.first_name ASC
`

type ListStudentsRow struct {
	StudentID    uuid.UUID   `json:"student_id"`
	LastName     string      `json:"last_name"`
	FirstName    string      `json:"first_name"`
	Gender       string      `json:"gender"`
	DateOfBirth  pgtype.Date `json:"date_of_birth"`
	Status       string      `json:"status"`
	Academicyear string      `json:"academicyear"`
	Classname    pgtype.Text `json:"classname"`
}

func (q *Queries) ListStudents(ctx context.Context) ([]ListStudentsRow, error) {
	rows, err := q.db.Query(ctx, listStudents)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListStudentsRow{}
	for rows.Next() {
		var i ListStudentsRow
		if err := rows.Scan(
			&i.StudentID,
			&i.LastName,
			&i.FirstName,
			&i.Gender,
			&i.DateOfBirth,
			&i.Status,
			&i.Academicyear,
			&i.Classname,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
