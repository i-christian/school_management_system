// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: students.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createStudent = `-- name: CreateStudent :one
INSERT INTO students (academic_year_id, last_name, first_name, gender, date_of_birth) 
VALUES ($1, $2, $3, $4, $5) 
RETURNING student_id, academic_year_id, last_name, first_name, gender, date_of_birth, status, promoted, graduated, suspended
`

type CreateStudentParams struct {
	AcademicYearID pgtype.UUID
	LastName       string
	FirstName      string
	Gender         string
	DateOfBirth    pgtype.Date
}

func (q *Queries) CreateStudent(ctx context.Context, arg CreateStudentParams) (Student, error) {
	row := q.db.QueryRow(ctx, createStudent,
		arg.AcademicYearID,
		arg.LastName,
		arg.FirstName,
		arg.Gender,
		arg.DateOfBirth,
	)
	var i Student
	err := row.Scan(
		&i.StudentID,
		&i.AcademicYearID,
		&i.LastName,
		&i.FirstName,
		&i.Gender,
		&i.DateOfBirth,
		&i.Status,
		&i.Promoted,
		&i.Graduated,
		&i.Suspended,
	)
	return i, err
}

const deleteStudent = `-- name: DeleteStudent :exec
DELETE FROM students WHERE student_id = $1
`

func (q *Queries) DeleteStudent(ctx context.Context, studentID pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteStudent, studentID)
	return err
}

const editStudent = `-- name: EditStudent :exec
UPDATE students
SET academic_year_id = COALESCE($2, academic_year_id),
last_name = COALESCE($3, last_name),
first_name = COALESCE($4, first_name),
gender = COALESCE($5, gender),
date_of_birth = COALESCE($5, date_of_birth) 
WHERE student_id = $1
`

type EditStudentParams struct {
	StudentID      pgtype.UUID
	AcademicYearID pgtype.UUID
	LastName       string
	FirstName      string
	Gender         string
}

func (q *Queries) EditStudent(ctx context.Context, arg EditStudentParams) error {
	_, err := q.db.Exec(ctx, editStudent,
		arg.StudentID,
		arg.AcademicYearID,
		arg.LastName,
		arg.FirstName,
		arg.Gender,
	)
	return err
}

const getStudent = `-- name: GetStudent :one
SELECT student_id, academic_year_id, last_name, first_name, gender, date_of_birth, status, promoted, graduated, suspended FROM students WHERE student_id = $1
`

func (q *Queries) GetStudent(ctx context.Context, studentID pgtype.UUID) (Student, error) {
	row := q.db.QueryRow(ctx, getStudent, studentID)
	var i Student
	err := row.Scan(
		&i.StudentID,
		&i.AcademicYearID,
		&i.LastName,
		&i.FirstName,
		&i.Gender,
		&i.DateOfBirth,
		&i.Status,
		&i.Promoted,
		&i.Graduated,
		&i.Suspended,
	)
	return i, err
}

const listStudents = `-- name: ListStudents :many
SELECT student_id, academic_year_id, last_name, first_name, gender, date_of_birth, status, promoted, graduated, suspended FROM students
`

func (q *Queries) ListStudents(ctx context.Context) ([]Student, error) {
	rows, err := q.db.Query(ctx, listStudents)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Student
	for rows.Next() {
		var i Student
		if err := rows.Scan(
			&i.StudentID,
			&i.AcademicYearID,
			&i.LastName,
			&i.FirstName,
			&i.Gender,
			&i.DateOfBirth,
			&i.Status,
			&i.Promoted,
			&i.Graduated,
			&i.Suspended,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
