// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: fees.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createFeesRecord = `-- name: CreateFeesRecord :one
INSERT INTO fees (student_id, term_id, class_id, required, paid)
VALUES ($1, $2, $3, $4, $5)
RETURNING fees_id, student_id, term_id, class_id, required, paid, status
`

type CreateFeesRecordParams struct {
	StudentID pgtype.UUID
	TermID    pgtype.UUID
	ClassID   pgtype.UUID
	Required  pgtype.Numeric
	Paid      pgtype.Numeric
}

func (q *Queries) CreateFeesRecord(ctx context.Context, arg CreateFeesRecordParams) (Fee, error) {
	row := q.db.QueryRow(ctx, createFeesRecord,
		arg.StudentID,
		arg.TermID,
		arg.ClassID,
		arg.Required,
		arg.Paid,
	)
	var i Fee
	err := row.Scan(
		&i.FeesID,
		&i.StudentID,
		&i.TermID,
		&i.ClassID,
		&i.Required,
		&i.Paid,
		&i.Status,
	)
	return i, err
}

const deleteFeesRecord = `-- name: DeleteFeesRecord :exec
DELETE FROM fees WHERE fees_id = $1
`

func (q *Queries) DeleteFeesRecord(ctx context.Context, feesID pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteFeesRecord, feesID)
	return err
}

const editFeesRecord = `-- name: EditFeesRecord :exec
UPDATE fees
SET term_id = COALESCE($2, term_id),
class_id = COALESCE($3, class_id),
required = COALESCE($4, required),
paid = COALESCE($5, paid)
WHERE fees_id = $1
`

type EditFeesRecordParams struct {
	FeesID   pgtype.UUID
	TermID   pgtype.UUID
	ClassID  pgtype.UUID
	Required pgtype.Numeric
	Paid     pgtype.Numeric
}

func (q *Queries) EditFeesRecord(ctx context.Context, arg EditFeesRecordParams) error {
	_, err := q.db.Exec(ctx, editFeesRecord,
		arg.FeesID,
		arg.TermID,
		arg.ClassID,
		arg.Required,
		arg.Paid,
	)
	return err
}

const getStudentFeesRecord = `-- name: GetStudentFeesRecord :one
SELECT
    fees.fees_id,
    students.last_name AS LastName,
    students.first_name AS FirstName,
    term.name AS AcademicTerm,
    classes.name AS ClassName,
    fees.required AS TutionAmount,
    fees.paid AS PaidAmount,
    fees.status
FROM fees
INNER JOIN students
    ON fees.student_id = students.student_id
INNER JOIN term
    ON fees.term_id = term.term_id
INNER JOIN classes
    ON fees.class_id = classes.class_id
WHERE students.student_id = $1
`

type GetStudentFeesRecordRow struct {
	FeesID       pgtype.UUID
	Lastname     string
	Firstname    string
	Academicterm string
	Classname    string
	Tutionamount pgtype.Numeric
	Paidamount   pgtype.Numeric
	Status       pgtype.Text
}

func (q *Queries) GetStudentFeesRecord(ctx context.Context, studentID pgtype.UUID) (GetStudentFeesRecordRow, error) {
	row := q.db.QueryRow(ctx, getStudentFeesRecord, studentID)
	var i GetStudentFeesRecordRow
	err := row.Scan(
		&i.FeesID,
		&i.Lastname,
		&i.Firstname,
		&i.Academicterm,
		&i.Classname,
		&i.Tutionamount,
		&i.Paidamount,
		&i.Status,
	)
	return i, err
}

const listStudentFeesRecords = `-- name: ListStudentFeesRecords :many
SELECT
    fees.fees_id,
    students.last_name AS LastName,
    students.first_name AS FirstName,
    term.name AS AcademicTerm,
    classes.name AS ClassName,
    fees.required AS TutionAmount,
    fees.paid AS PaidAmount,
    fees.status
FROM fees
INNER JOIN students
    ON fees.student_id = students.student_id
INNER JOIN term
    ON fees.term_id = term.term_id
INNER JOIN classes
    ON fees.class_id = classes.class_id
`

type ListStudentFeesRecordsRow struct {
	FeesID       pgtype.UUID
	Lastname     string
	Firstname    string
	Academicterm string
	Classname    string
	Tutionamount pgtype.Numeric
	Paidamount   pgtype.Numeric
	Status       pgtype.Text
}

func (q *Queries) ListStudentFeesRecords(ctx context.Context) ([]ListStudentFeesRecordsRow, error) {
	rows, err := q.db.Query(ctx, listStudentFeesRecords)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListStudentFeesRecordsRow
	for rows.Next() {
		var i ListStudentFeesRecordsRow
		if err := rows.Scan(
			&i.FeesID,
			&i.Lastname,
			&i.Firstname,
			&i.Academicterm,
			&i.Classname,
			&i.Tutionamount,
			&i.Paidamount,
			&i.Status,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
