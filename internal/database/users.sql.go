// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: users.sql

package database

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (first_name, last_name, phone_number, email, gender, password, role_id)
VALUES (
    $1,
    $2,
    $3,
    $4,
    $5,
    $6,
    (SELECT role_id FROM roles WHERE name = $7)
)
ON CONFLICT (phone_number) DO NOTHING
RETURNING user_id, user_no, last_name, first_name, gender, email, phone_number, password, created_at, updated_at, role_id
`

type CreateUserParams struct {
	FirstName   string      `json:"first_name"`
	LastName    string      `json:"last_name"`
	PhoneNumber pgtype.Text `json:"phone_number"`
	Email       pgtype.Text `json:"email"`
	Gender      string      `json:"gender"`
	Password    string      `json:"password"`
	Name        string      `json:"name"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.FirstName,
		arg.LastName,
		arg.PhoneNumber,
		arg.Email,
		arg.Gender,
		arg.Password,
		arg.Name,
	)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.UserNo,
		&i.LastName,
		&i.FirstName,
		&i.Gender,
		&i.Email,
		&i.PhoneNumber,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.RoleID,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE user_id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, userID uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteUser, userID)
	return err
}

const editUser = `-- name: EditUser :exec
UPDATE users
    set first_name = COALESCE($2, first_name),
    last_name = COALESCE($3, last_name),
    gender = COALESCE($4, gender),
    phone_number = COALESCE($5, phone_number),
    email = COALESCE($6, email),
    password = COALESCE($7, password),
    role_id = COALESCE((SELECT role_id FROM roles WHERE name = $8), role_id)
WHERE user_id = $1
`

type EditUserParams struct {
	UserID      uuid.UUID   `json:"user_id"`
	FirstName   string      `json:"first_name"`
	LastName    string      `json:"last_name"`
	Gender      string      `json:"gender"`
	PhoneNumber pgtype.Text `json:"phone_number"`
	Email       pgtype.Text `json:"email"`
	Password    string      `json:"password"`
	Name        string      `json:"name"`
}

func (q *Queries) EditUser(ctx context.Context, arg EditUserParams) error {
	_, err := q.db.Exec(ctx, editUser,
		arg.UserID,
		arg.FirstName,
		arg.LastName,
		arg.Gender,
		arg.PhoneNumber,
		arg.Email,
		arg.Password,
		arg.Name,
	)
	return err
}

const getUserByPhone = `-- name: GetUserByPhone :one
SELECT password, user_id FROM users 
WHERE phone_number = $1
`

type GetUserByPhoneRow struct {
	Password string    `json:"password"`
	UserID   uuid.UUID `json:"user_id"`
}

func (q *Queries) GetUserByPhone(ctx context.Context, phoneNumber pgtype.Text) (GetUserByPhoneRow, error) {
	row := q.db.QueryRow(ctx, getUserByPhone, phoneNumber)
	var i GetUserByPhoneRow
	err := row.Scan(&i.Password, &i.UserID)
	return i, err
}

const getUserDetails = `-- name: GetUserDetails :one
SELECT 
    users.user_id,
    users.user_no,
    users.last_name, 
    users.first_name, 
    users.gender, 
    users.email, 
    users.phone_number,
    users.password, 
    roles.name AS role
FROM 
    users
INNER JOIN 
    roles 
ON 
    users.role_id = roles.role_id
WHERE 
    users.user_id = $1
`

type GetUserDetailsRow struct {
	UserID      uuid.UUID   `json:"user_id"`
	UserNo      string      `json:"user_no"`
	LastName    string      `json:"last_name"`
	FirstName   string      `json:"first_name"`
	Gender      string      `json:"gender"`
	Email       pgtype.Text `json:"email"`
	PhoneNumber pgtype.Text `json:"phone_number"`
	Password    string      `json:"password"`
	Role        string      `json:"role"`
}

func (q *Queries) GetUserDetails(ctx context.Context, userID uuid.UUID) (GetUserDetailsRow, error) {
	row := q.db.QueryRow(ctx, getUserDetails, userID)
	var i GetUserDetailsRow
	err := row.Scan(
		&i.UserID,
		&i.UserNo,
		&i.LastName,
		&i.FirstName,
		&i.Gender,
		&i.Email,
		&i.PhoneNumber,
		&i.Password,
		&i.Role,
	)
	return i, err
}

const getUserRole = `-- name: GetUserRole :one
SELECT roles.name AS role, users.user_id
FROM users
INNER JOIN sessions 
    ON users.user_id = sessions.user_id
INNER JOIN roles 
    ON users.role_id = roles.role_id
WHERE session_id = $1
`

type GetUserRoleRow struct {
	Role   string    `json:"role"`
	UserID uuid.UUID `json:"user_id"`
}

func (q *Queries) GetUserRole(ctx context.Context, sessionID uuid.UUID) (GetUserRoleRow, error) {
	row := q.db.QueryRow(ctx, getUserRole, sessionID)
	var i GetUserRoleRow
	err := row.Scan(&i.Role, &i.UserID)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT
    users.user_id,
    users.user_no,
    users.last_name,
    users.first_name,
    users.gender,
    users.email,
    users.phone_number,
    users.password,
    roles.name AS role
FROM users
INNER JOIN roles ON users.role_id = roles.role_id
ORDER BY last_name
`

type ListUsersRow struct {
	UserID      uuid.UUID   `json:"user_id"`
	UserNo      string      `json:"user_no"`
	LastName    string      `json:"last_name"`
	FirstName   string      `json:"first_name"`
	Gender      string      `json:"gender"`
	Email       pgtype.Text `json:"email"`
	PhoneNumber pgtype.Text `json:"phone_number"`
	Password    string      `json:"password"`
	Role        string      `json:"role"`
}

func (q *Queries) ListUsers(ctx context.Context) ([]ListUsersRow, error) {
	rows, err := q.db.Query(ctx, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListUsersRow{}
	for rows.Next() {
		var i ListUsersRow
		if err := rows.Scan(
			&i.UserID,
			&i.UserNo,
			&i.LastName,
			&i.FirstName,
			&i.Gender,
			&i.Email,
			&i.PhoneNumber,
			&i.Password,
			&i.Role,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
