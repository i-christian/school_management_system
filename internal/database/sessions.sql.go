// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: sessions.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createSession = `-- name: CreateSession :exec
INSERT INTO sessions (session_id, user_id) 
VALUES ($1, $2)
`

type CreateSessionParams struct {
	SessionID pgtype.UUID
	UserID    pgtype.UUID
}

func (q *Queries) CreateSession(ctx context.Context, arg CreateSessionParams) error {
	_, err := q.db.Exec(ctx, createSession, arg.SessionID, arg.UserID)
	return err
}

const deleteSession = `-- name: DeleteSession :exec
DELETE FROM sessions
WHERE user_id = $1
`

func (q *Queries) DeleteSession(ctx context.Context, userID pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteSession, userID)
	return err
}

const getSession = `-- name: GetSession :one
SELECT session_id, expires FROM sessions WHERE user_id = $1
`

type GetSessionRow struct {
	SessionID pgtype.UUID
	Expires   pgtype.Timestamptz
}

func (q *Queries) GetSession(ctx context.Context, userID pgtype.UUID) (GetSessionRow, error) {
	row := q.db.QueryRow(ctx, getSession, userID)
	var i GetSessionRow
	err := row.Scan(&i.SessionID, &i.Expires)
	return i, err
}

const refreshSession = `-- name: RefreshSession :exec
UPDATE sessions
  SET expires = COALESCE($2, expires)
WHERE user_id = $1
`

type RefreshSessionParams struct {
	UserID  pgtype.UUID
	Expires pgtype.Timestamptz
}

func (q *Queries) RefreshSession(ctx context.Context, arg RefreshSessionParams) error {
	_, err := q.db.Exec(ctx, refreshSession, arg.UserID, arg.Expires)
	return err
}
