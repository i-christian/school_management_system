// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: sessions.sql

package database

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createSession = `-- name: CreateSession :one
INSERT INTO sessions (session_id, user_id) 
VALUES ($1, $2) RETURNING session_id
`

type CreateSessionParams struct {
	SessionID uuid.UUID `json:"session_id"`
	UserID    uuid.UUID `json:"user_id"`
}

func (q *Queries) CreateSession(ctx context.Context, arg CreateSessionParams) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, createSession, arg.SessionID, arg.UserID)
	var session_id uuid.UUID
	err := row.Scan(&session_id)
	return session_id, err
}

const deleteSession = `-- name: DeleteSession :exec
DELETE FROM sessions
WHERE user_id = $1
`

func (q *Queries) DeleteSession(ctx context.Context, userID uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteSession, userID)
	return err
}

const getSession = `-- name: GetSession :one
SELECT session_id, expires FROM sessions WHERE user_id = $1
`

type GetSessionRow struct {
	SessionID uuid.UUID          `json:"session_id"`
	Expires   pgtype.Timestamptz `json:"expires"`
}

func (q *Queries) GetSession(ctx context.Context, userID uuid.UUID) (GetSessionRow, error) {
	row := q.db.QueryRow(ctx, getSession, userID)
	var i GetSessionRow
	err := row.Scan(&i.SessionID, &i.Expires)
	return i, err
}

const refreshSession = `-- name: RefreshSession :exec
UPDATE sessions
  SET expires = COALESCE($2, expires)
WHERE user_id = $1
`

type RefreshSessionParams struct {
	UserID  uuid.UUID          `json:"user_id"`
	Expires pgtype.Timestamptz `json:"expires"`
}

func (q *Queries) RefreshSession(ctx context.Context, arg RefreshSessionParams) error {
	_, err := q.db.Exec(ctx, refreshSession, arg.UserID, arg.Expires)
	return err
}
