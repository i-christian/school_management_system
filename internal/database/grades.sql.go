// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: grades.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createGrade = `-- name: CreateGrade :one
INSERT INTO grades (student_id, subject_id, term_id, score, remark) 
VALUES ($1, $2, $3, $4, $5)
RETURNING grade_id, student_id, subject_id, term_id, score, remark
`

type CreateGradeParams struct {
	StudentID pgtype.UUID
	SubjectID pgtype.UUID
	TermID    pgtype.UUID
	Score     pgtype.Numeric
	Remark    pgtype.Text
}

func (q *Queries) CreateGrade(ctx context.Context, arg CreateGradeParams) (Grade, error) {
	row := q.db.QueryRow(ctx, createGrade,
		arg.StudentID,
		arg.SubjectID,
		arg.TermID,
		arg.Score,
		arg.Remark,
	)
	var i Grade
	err := row.Scan(
		&i.GradeID,
		&i.StudentID,
		&i.SubjectID,
		&i.TermID,
		&i.Score,
		&i.Remark,
	)
	return i, err
}

const deleteGrade = `-- name: DeleteGrade :exec
DELETE FROM grades WHERE grade_id = $1
`

func (q *Queries) DeleteGrade(ctx context.Context, gradeID pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteGrade, gradeID)
	return err
}

const editGrade = `-- name: EditGrade :exec
UPDATE grades
SET student_id = COALESCE($2, student_id),
subject_id = COALESCE($3, subject_id),
term_id = COALESCE($4, term_id),
score = COALESCE($5, score),
remark = COALESCE($6, remark)
WHERE grade_id = $1
`

type EditGradeParams struct {
	GradeID   pgtype.UUID
	StudentID pgtype.UUID
	SubjectID pgtype.UUID
	TermID    pgtype.UUID
	Score     pgtype.Numeric
	Remark    pgtype.Text
}

func (q *Queries) EditGrade(ctx context.Context, arg EditGradeParams) error {
	_, err := q.db.Exec(ctx, editGrade,
		arg.GradeID,
		arg.StudentID,
		arg.SubjectID,
		arg.TermID,
		arg.Score,
		arg.Remark,
	)
	return err
}

const getGrade = `-- name: GetGrade :one
SELECT
    grades.grade_id,
    students.last_name,
    students.first_name,
    subjects.name AS Subject,
    term.name AS AcademicTerm,
    grades.score,
    grades.remark
FROM grades
INNER JOIN students
    ON grades.student_id = students.student_id
INNER JOIN subjects
    ON grades.subject_id =  students.student_id
INNER JOIN term
    ON grades.term_id = term.term_id
WHERE students.student_id = $1
`

type GetGradeRow struct {
	GradeID      pgtype.UUID
	LastName     string
	FirstName    string
	Subject      string
	Academicterm string
	Score        pgtype.Numeric
	Remark       pgtype.Text
}

func (q *Queries) GetGrade(ctx context.Context, studentID pgtype.UUID) (GetGradeRow, error) {
	row := q.db.QueryRow(ctx, getGrade, studentID)
	var i GetGradeRow
	err := row.Scan(
		&i.GradeID,
		&i.LastName,
		&i.FirstName,
		&i.Subject,
		&i.Academicterm,
		&i.Score,
		&i.Remark,
	)
	return i, err
}

const listGrades = `-- name: ListGrades :many
SELECT
    grades.grade_id,
    students.last_name,
    students.first_name,
    subjects.name AS Subject,
    term.name AS AcademicTerm,
    grades.score,
    grades.remark
FROM grades
INNER JOIN students
    ON grades.student_id = students.student_id
INNER JOIN subjects
    ON grades.subject_id =  students.student_id
INNER JOIN term
    ON grades.term_id = term.term_id
`

type ListGradesRow struct {
	GradeID      pgtype.UUID
	LastName     string
	FirstName    string
	Subject      string
	Academicterm string
	Score        pgtype.Numeric
	Remark       pgtype.Text
}

func (q *Queries) ListGrades(ctx context.Context) ([]ListGradesRow, error) {
	rows, err := q.db.Query(ctx, listGrades)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListGradesRow
	for rows.Next() {
		var i ListGradesRow
		if err := rows.Scan(
			&i.GradeID,
			&i.LastName,
			&i.FirstName,
			&i.Subject,
			&i.Academicterm,
			&i.Score,
			&i.Remark,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
