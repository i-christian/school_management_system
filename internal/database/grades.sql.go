// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: grades.sql

package database

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const deleteGrade = `-- name: DeleteGrade :exec
DELETE FROM grades WHERE grade_id = $1
`

func (q *Queries) DeleteGrade(ctx context.Context, gradeID uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteGrade, gradeID)
	return err
}

const editGrade = `-- name: EditGrade :exec
UPDATE grades
SET score = COALESCE($2, score),
    remark = COALESCE($3, remark)
WHERE grade_id = $1
`

type EditGradeParams struct {
	GradeID uuid.UUID      `json:"grade_id"`
	Score   pgtype.Numeric `json:"score"`
	Remark  pgtype.Text    `json:"remark"`
}

func (q *Queries) EditGrade(ctx context.Context, arg EditGradeParams) error {
	_, err := q.db.Exec(ctx, editGrade, arg.GradeID, arg.Score, arg.Remark)
	return err
}

const getGrades = `-- name: GetGrades :one
SELECT student_id, student_no, last_name, first_name, middle_name, class_id, class_name, grades
FROM student_grades_view
WHERE student_id = $1
`

func (q *Queries) GetGrades(ctx context.Context, studentID uuid.UUID) (StudentGradesView, error) {
	row := q.db.QueryRow(ctx, getGrades, studentID)
	var i StudentGradesView
	err := row.Scan(
		&i.StudentID,
		&i.StudentNo,
		&i.LastName,
		&i.FirstName,
		&i.MiddleName,
		&i.ClassID,
		&i.ClassName,
		&i.Grades,
	)
	return i, err
}

const listGrades = `-- name: ListGrades :many
SELECT student_id, student_no, last_name, first_name, middle_name, class_id, class_name, grades
FROM student_grades_view
ORDER BY class_name, student_no
`

func (q *Queries) ListGrades(ctx context.Context) ([]StudentGradesView, error) {
	rows, err := q.db.Query(ctx, listGrades)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []StudentGradesView{}
	for rows.Next() {
		var i StudentGradesView
		if err := rows.Scan(
			&i.StudentID,
			&i.StudentNo,
			&i.LastName,
			&i.FirstName,
			&i.MiddleName,
			&i.ClassID,
			&i.ClassName,
			&i.Grades,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const upsertGrade = `-- name: UpsertGrade :one
INSERT INTO grades (student_id, subject_id, term_id, score, remark)
VALUES ($1, $2, $3, $4, $5)
ON CONFLICT (student_id, subject_id, term_id)
DO UPDATE SET 
    score = EXCLUDED.score,
    remark = EXCLUDED.remark
RETURNING grade_id, student_id, subject_id, term_id, score, remark
`

type UpsertGradeParams struct {
	StudentID uuid.UUID      `json:"student_id"`
	SubjectID uuid.UUID      `json:"subject_id"`
	TermID    uuid.UUID      `json:"term_id"`
	Score     pgtype.Numeric `json:"score"`
	Remark    pgtype.Text    `json:"remark"`
}

func (q *Queries) UpsertGrade(ctx context.Context, arg UpsertGradeParams) (Grade, error) {
	row := q.db.QueryRow(ctx, upsertGrade,
		arg.StudentID,
		arg.SubjectID,
		arg.TermID,
		arg.Score,
		arg.Remark,
	)
	var i Grade
	err := row.Scan(
		&i.GradeID,
		&i.StudentID,
		&i.SubjectID,
		&i.TermID,
		&i.Score,
		&i.Remark,
	)
	return i, err
}
