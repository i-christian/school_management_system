// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: student_classes.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createStudentClasses = `-- name: CreateStudentClasses :one
INSERT INTO student_classes (student_id, class_id, term_id)
VALUES ($1, $2, $3) RETURNING student_class_id, student_id, class_id, term_id
`

type CreateStudentClassesParams struct {
	StudentID pgtype.UUID
	ClassID   pgtype.UUID
	TermID    pgtype.UUID
}

func (q *Queries) CreateStudentClasses(ctx context.Context, arg CreateStudentClassesParams) (StudentClass, error) {
	row := q.db.QueryRow(ctx, createStudentClasses, arg.StudentID, arg.ClassID, arg.TermID)
	var i StudentClass
	err := row.Scan(
		&i.StudentClassID,
		&i.StudentID,
		&i.ClassID,
		&i.TermID,
	)
	return i, err
}

const deleteStudentClasses = `-- name: DeleteStudentClasses :exec
DELETE FROM student_classes WHERE student_class_id = $1
`

func (q *Queries) DeleteStudentClasses(ctx context.Context, studentClassID pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteStudentClasses, studentClassID)
	return err
}

const editStudentClasses = `-- name: EditStudentClasses :exec
UPDATE student_classes
SET student_id = COALESCE($2, student_id),
class_id = COALESCE($3, class_id),
term_id = COALESCE($4, term_id)
WHERE student_class_id = $1
`

type EditStudentClassesParams struct {
	StudentClassID pgtype.UUID
	StudentID      pgtype.UUID
	ClassID        pgtype.UUID
	TermID         pgtype.UUID
}

func (q *Queries) EditStudentClasses(ctx context.Context, arg EditStudentClassesParams) error {
	_, err := q.db.Exec(ctx, editStudentClasses,
		arg.StudentClassID,
		arg.StudentID,
		arg.ClassID,
		arg.TermID,
	)
	return err
}

const getStudentClasses = `-- name: GetStudentClasses :one
SELECT student_class_id, student_id, class_id, term_id FROM student_classes WHERE student_class_id = $1
`

func (q *Queries) GetStudentClasses(ctx context.Context, studentClassID pgtype.UUID) (StudentClass, error) {
	row := q.db.QueryRow(ctx, getStudentClasses, studentClassID)
	var i StudentClass
	err := row.Scan(
		&i.StudentClassID,
		&i.StudentID,
		&i.ClassID,
		&i.TermID,
	)
	return i, err
}

const listStudentClasses = `-- name: ListStudentClasses :many
SELECT student_class_id, student_id, class_id, term_id FROM student_classes
`

func (q *Queries) ListStudentClasses(ctx context.Context) ([]StudentClass, error) {
	rows, err := q.db.Query(ctx, listStudentClasses)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []StudentClass
	for rows.Next() {
		var i StudentClass
		if err := rows.Scan(
			&i.StudentClassID,
			&i.StudentID,
			&i.ClassID,
			&i.TermID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
