// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: assignments.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createAssignments = `-- name: CreateAssignments :one
INSERT INTO assignments (class_id, subject_id, teacher_id)
VALUES($1, $2, $3) RETURNING id, class_id, subject_id, teacher_id
`

type CreateAssignmentsParams struct {
	ClassID   pgtype.UUID
	SubjectID pgtype.UUID
	TeacherID pgtype.UUID
}

func (q *Queries) CreateAssignments(ctx context.Context, arg CreateAssignmentsParams) (Assignment, error) {
	row := q.db.QueryRow(ctx, createAssignments, arg.ClassID, arg.SubjectID, arg.TeacherID)
	var i Assignment
	err := row.Scan(
		&i.ID,
		&i.ClassID,
		&i.SubjectID,
		&i.TeacherID,
	)
	return i, err
}

const deleteAssignments = `-- name: DeleteAssignments :exec
DELETE FROM assignments WHERE id = $1
`

func (q *Queries) DeleteAssignments(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteAssignments, id)
	return err
}

const editAssignments = `-- name: EditAssignments :exec
UPDATE assignments
SET class_id = COALESCE($2, class_id),
subject_id = COALESCE($3, subject_id),
teacher_id = COALESCE($4, teacher_id)
WHERE id = $1
`

type EditAssignmentsParams struct {
	ID        pgtype.UUID
	ClassID   pgtype.UUID
	SubjectID pgtype.UUID
	TeacherID pgtype.UUID
}

func (q *Queries) EditAssignments(ctx context.Context, arg EditAssignmentsParams) error {
	_, err := q.db.Exec(ctx, editAssignments,
		arg.ID,
		arg.ClassID,
		arg.SubjectID,
		arg.TeacherID,
	)
	return err
}

const getAssignment = `-- name: GetAssignment :one
SELECT
assignments.id,
classes.name AS ClassRoom,
subjects.name AS Subject,
users.last_name AS Teacher_LastName,
users.first_name AS Teacher_FirstName
FROM assignments
INNER JOIN classes ON assignments.class_id = classes.class_id
INNER JOIN subjects ON assignments.subject_id = subjects.subject_id
INNER JOIN users ON assignments.teacher_id = users.user_id
WHERE teacher_id = $1
`

type GetAssignmentRow struct {
	ID               pgtype.UUID
	Classroom        string
	Subject          string
	TeacherLastname  string
	TeacherFirstname string
}

func (q *Queries) GetAssignment(ctx context.Context, teacherID pgtype.UUID) (GetAssignmentRow, error) {
	row := q.db.QueryRow(ctx, getAssignment, teacherID)
	var i GetAssignmentRow
	err := row.Scan(
		&i.ID,
		&i.Classroom,
		&i.Subject,
		&i.TeacherLastname,
		&i.TeacherFirstname,
	)
	return i, err
}

const listAssignments = `-- name: ListAssignments :many
SELECT
assignments.id AS assignment_id,
classes.name AS ClassRoom,
subjects.name AS Subject,
users.last_name AS Teacher_LastName,
users.first_name AS Teacher_FirstName
FROM assignments
INNER JOIN classes ON assignments.class_id = classes.class_id
INNER JOIN subjects ON assignments.subject_id = subjects.subject_id
INNER JOIN users ON assignments.teacher_id = users.user_id
`

type ListAssignmentsRow struct {
	AssignmentID     pgtype.UUID
	Classroom        string
	Subject          string
	TeacherLastname  string
	TeacherFirstname string
}

func (q *Queries) ListAssignments(ctx context.Context) ([]ListAssignmentsRow, error) {
	rows, err := q.db.Query(ctx, listAssignments)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListAssignmentsRow
	for rows.Next() {
		var i ListAssignmentsRow
		if err := rows.Scan(
			&i.AssignmentID,
			&i.Classroom,
			&i.Subject,
			&i.TeacherLastname,
			&i.TeacherFirstname,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
