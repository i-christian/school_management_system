// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: guardians.sql

package database

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const getAllStudentGuardianLinks = `-- name: GetAllStudentGuardianLinks :many
SELECT
    s.last_name AS student_first_name,
    s.first_name AS student_last_name,
    g.guardian_name AS guardian_name,
    g.phone_number_1,
    g.phone_number_2,
    g.gender AS guardian_gender,
    g.profession AS guardian_profession
FROM students s
INNER JOIN student_guardians sg ON s.student_id = sg.student_id
INNER JOIN guardians g ON sg.guardian_id = g.guardian_id
ORDER BY s.last_name
`

type GetAllStudentGuardianLinksRow struct {
	StudentFirstName   string      `json:"student_first_name"`
	StudentLastName    string      `json:"student_last_name"`
	GuardianName       string      `json:"guardian_name"`
	PhoneNumber1       pgtype.Text `json:"phone_number_1"`
	PhoneNumber2       pgtype.Text `json:"phone_number_2"`
	GuardianGender     string      `json:"guardian_gender"`
	GuardianProfession pgtype.Text `json:"guardian_profession"`
}

func (q *Queries) GetAllStudentGuardianLinks(ctx context.Context) ([]GetAllStudentGuardianLinksRow, error) {
	rows, err := q.db.Query(ctx, getAllStudentGuardianLinks)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetAllStudentGuardianLinksRow{}
	for rows.Next() {
		var i GetAllStudentGuardianLinksRow
		if err := rows.Scan(
			&i.StudentFirstName,
			&i.StudentLastName,
			&i.GuardianName,
			&i.PhoneNumber1,
			&i.PhoneNumber2,
			&i.GuardianGender,
			&i.GuardianProfession,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getGuardianByPhone = `-- name: GetGuardianByPhone :one
SELECT guardian_id, guardian_name, phone_number_1, phone_number_2, gender, profession FROM guardians
WHERE phone_number_1 = $1
OR phone_number_2 = $1
`

func (q *Queries) GetGuardianByPhone(ctx context.Context, phoneNumber1 pgtype.Text) (Guardian, error) {
	row := q.db.QueryRow(ctx, getGuardianByPhone, phoneNumber1)
	var i Guardian
	err := row.Scan(
		&i.GuardianID,
		&i.GuardianName,
		&i.PhoneNumber1,
		&i.PhoneNumber2,
		&i.Gender,
		&i.Profession,
	)
	return i, err
}

const getStudentAndLinkedGuardian = `-- name: GetStudentAndLinkedGuardian :one
SELECT
    s.last_name AS student_first_name,
    s.first_name AS student_last_name,
    s.gender AS student_gender, g.guardian_id, g.guardian_name, g.phone_number_1, g.phone_number_2, g.gender, g.profession
FROM students s
LEFT JOIN student_guardians sg ON s.student_id = sg.student_id
LEFT JOIN guardians g ON sg.guardian_id = g.guardian_id
WHERE s.student_id = $1
`

type GetStudentAndLinkedGuardianRow struct {
	StudentFirstName string      `json:"student_first_name"`
	StudentLastName  string      `json:"student_last_name"`
	StudentGender    string      `json:"student_gender"`
	GuardianID       pgtype.UUID `json:"guardian_id"`
	GuardianName     pgtype.Text `json:"guardian_name"`
	PhoneNumber1     pgtype.Text `json:"phone_number_1"`
	PhoneNumber2     pgtype.Text `json:"phone_number_2"`
	Gender           pgtype.Text `json:"gender"`
	Profession       pgtype.Text `json:"profession"`
}

func (q *Queries) GetStudentAndLinkedGuardian(ctx context.Context, studentID uuid.UUID) (GetStudentAndLinkedGuardianRow, error) {
	row := q.db.QueryRow(ctx, getStudentAndLinkedGuardian, studentID)
	var i GetStudentAndLinkedGuardianRow
	err := row.Scan(
		&i.StudentFirstName,
		&i.StudentLastName,
		&i.StudentGender,
		&i.GuardianID,
		&i.GuardianName,
		&i.PhoneNumber1,
		&i.PhoneNumber2,
		&i.Gender,
		&i.Profession,
	)
	return i, err
}

const updateGuardianAndLink = `-- name: UpdateGuardianAndLink :exec
UPDATE guardians
SET guardian_name = COALESCE($2, guardian_name),
    phone_number_1 = COALESCE($3, phone_number_1),
    phone_number_2 = COALESCE($4, phone_number_2),
    gender = COALESCE($5, gender),
    profession = COALESCE($6, profession)
WHERE guardian_id = $1
`

type UpdateGuardianAndLinkParams struct {
	GuardianID   uuid.UUID   `json:"guardian_id"`
	GuardianName string      `json:"guardian_name"`
	PhoneNumber1 pgtype.Text `json:"phone_number_1"`
	PhoneNumber2 pgtype.Text `json:"phone_number_2"`
	Gender       string      `json:"gender"`
	Profession   pgtype.Text `json:"profession"`
}

func (q *Queries) UpdateGuardianAndLink(ctx context.Context, arg UpdateGuardianAndLinkParams) error {
	_, err := q.db.Exec(ctx, updateGuardianAndLink,
		arg.GuardianID,
		arg.GuardianName,
		arg.PhoneNumber1,
		arg.PhoneNumber2,
		arg.Gender,
		arg.Profession,
	)
	return err
}
