// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: guardians.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createGuardian = `-- name: CreateGuardian :one
INSERT INTO guardians (student_id, name, phone_number_1, phone_number_2, gender, profession)
VALUES ($1, $2, $3, $4, $5, $6) 
RETURNING guardian_id, student_id, name, phone_number_1, phone_number_2, gender, profession
`

type CreateGuardianParams struct {
	StudentID    pgtype.UUID
	Name         string
	PhoneNumber1 pgtype.Text
	PhoneNumber2 pgtype.Text
	Gender       pgtype.Text
	Profession   pgtype.Text
}

func (q *Queries) CreateGuardian(ctx context.Context, arg CreateGuardianParams) (Guardian, error) {
	row := q.db.QueryRow(ctx, createGuardian,
		arg.StudentID,
		arg.Name,
		arg.PhoneNumber1,
		arg.PhoneNumber2,
		arg.Gender,
		arg.Profession,
	)
	var i Guardian
	err := row.Scan(
		&i.GuardianID,
		&i.StudentID,
		&i.Name,
		&i.PhoneNumber1,
		&i.PhoneNumber2,
		&i.Gender,
		&i.Profession,
	)
	return i, err
}

const deleteGuardian = `-- name: DeleteGuardian :exec
DELETE FROM guardians WHERE guardian_id = $1
`

func (q *Queries) DeleteGuardian(ctx context.Context, guardianID pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteGuardian, guardianID)
	return err
}

const editGuardian = `-- name: EditGuardian :exec
UPDATE guardians
SET student_id = COALESCE($2, student_id),
name = COALESCE($3, name),
phone_number_1 = COALESCE($4, phone_number_1),
phone_number_2 = COALESCE($5, phone_number_2),
gender = COALESCE($6, gender),
profession = COALESCE($7, profession)
WHERE guardian_id = $1
`

type EditGuardianParams struct {
	GuardianID   pgtype.UUID
	StudentID    pgtype.UUID
	Name         string
	PhoneNumber1 pgtype.Text
	PhoneNumber2 pgtype.Text
	Gender       pgtype.Text
	Profession   pgtype.Text
}

func (q *Queries) EditGuardian(ctx context.Context, arg EditGuardianParams) error {
	_, err := q.db.Exec(ctx, editGuardian,
		arg.GuardianID,
		arg.StudentID,
		arg.Name,
		arg.PhoneNumber1,
		arg.PhoneNumber2,
		arg.Gender,
		arg.Profession,
	)
	return err
}

const getGuardian = `-- name: GetGuardian :one
SELECT guardian_id, student_id, name, phone_number_1, phone_number_2, gender, profession FROM guardians WHERE guardian_id = $1
`

func (q *Queries) GetGuardian(ctx context.Context, guardianID pgtype.UUID) (Guardian, error) {
	row := q.db.QueryRow(ctx, getGuardian, guardianID)
	var i Guardian
	err := row.Scan(
		&i.GuardianID,
		&i.StudentID,
		&i.Name,
		&i.PhoneNumber1,
		&i.PhoneNumber2,
		&i.Gender,
		&i.Profession,
	)
	return i, err
}

const listGuardians = `-- name: ListGuardians :many
SELECT guardian_id, student_id, name, phone_number_1, phone_number_2, gender, profession FROM guardians
`

func (q *Queries) ListGuardians(ctx context.Context) ([]Guardian, error) {
	rows, err := q.db.Query(ctx, listGuardians)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Guardian
	for rows.Next() {
		var i Guardian
		if err := rows.Scan(
			&i.GuardianID,
			&i.StudentID,
			&i.Name,
			&i.PhoneNumber1,
			&i.PhoneNumber2,
			&i.Gender,
			&i.Profession,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
