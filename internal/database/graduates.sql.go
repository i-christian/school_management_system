// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: graduates.sql

package database

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createGraduateClass = `-- name: CreateGraduateClass :one
INSERT INTO classes (name) VALUES ($1) RETURNING class_id, name
`

func (q *Queries) CreateGraduateClass(ctx context.Context, name string) (Class, error) {
	row := q.db.QueryRow(ctx, createGraduateClass, name)
	var i Class
	err := row.Scan(&i.ClassID, &i.Name)
	return i, err
}

const listGraduatesByAcademicYear = `-- name: ListGraduatesByAcademicYear :many
SELECT
  s.student_no,
  s.first_name,
  s.middle_name,
  s.last_name,
  s.gender,
  s.graduated,
  c.name AS graduate_class_name
FROM students s
JOIN student_classes sc ON s.student_id = sc.student_id
JOIN term t ON sc.term_id = t.term_id
JOIN academic_year ay ON t.academic_year_id = ay.academic_year_id
LEFT JOIN classes c ON sc.class_id = c.class_id
WHERE s.graduated = TRUE
  AND ay.academic_year_id = $1
  AND c.name ILIKE 'Graduates - %'
`

type ListGraduatesByAcademicYearRow struct {
	StudentNo         string      `json:"student_no"`
	FirstName         string      `json:"first_name"`
	MiddleName        pgtype.Text `json:"middle_name"`
	LastName          string      `json:"last_name"`
	Gender            string      `json:"gender"`
	Graduated         bool        `json:"graduated"`
	GraduateClassName pgtype.Text `json:"graduate_class_name"`
}

func (q *Queries) ListGraduatesByAcademicYear(ctx context.Context, academicYearID uuid.UUID) ([]ListGraduatesByAcademicYearRow, error) {
	rows, err := q.db.Query(ctx, listGraduatesByAcademicYear, academicYearID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListGraduatesByAcademicYearRow{}
	for rows.Next() {
		var i ListGraduatesByAcademicYearRow
		if err := rows.Scan(
			&i.StudentNo,
			&i.FirstName,
			&i.MiddleName,
			&i.LastName,
			&i.Gender,
			&i.Graduated,
			&i.GraduateClassName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
