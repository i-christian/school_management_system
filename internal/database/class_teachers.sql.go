// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: class_teachers.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const getAllDBClassTeachers = `-- name: GetAllDBClassTeachers :many
select
    u.user_id as teacher_id,
    u.first_name,
    u.last_name,
    r.name as role
from users u
join roles r on u.role_id = r.role_id
and r.name = 'classteacher'
`

type GetAllDBClassTeachersRow struct {
	TeacherID uuid.UUID `json:"teacher_id"`
	FirstName string    `json:"first_name"`
	LastName  string    `json:"last_name"`
	Role      string    `json:"role"`
}

func (q *Queries) GetAllDBClassTeachers(ctx context.Context) ([]GetAllDBClassTeachersRow, error) {
	rows, err := q.db.Query(ctx, getAllDBClassTeachers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetAllDBClassTeachersRow{}
	for rows.Next() {
		var i GetAllDBClassTeachersRow
		if err := rows.Scan(
			&i.TeacherID,
			&i.FirstName,
			&i.LastName,
			&i.Role,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getClassTeacher = `-- name: GetClassTeacher :one
select
    ct.id,
    u.first_name,
    u.last_name,
    c.class_id,
    c.name as class
from class_teachers ct
join users u on ct.teacher_id = u.user_id
join classes c on ct.class_id = c.class_id
where c.class_id = $1
`

type GetClassTeacherRow struct {
	ID        uuid.UUID `json:"id"`
	FirstName string    `json:"first_name"`
	LastName  string    `json:"last_name"`
	ClassID   uuid.UUID `json:"class_id"`
	Class     string    `json:"class"`
}

func (q *Queries) GetClassTeacher(ctx context.Context, classID uuid.UUID) (GetClassTeacherRow, error) {
	row := q.db.QueryRow(ctx, getClassTeacher, classID)
	var i GetClassTeacherRow
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.ClassID,
		&i.Class,
	)
	return i, err
}

const listCLassTeachers = `-- name: ListCLassTeachers :many
select
    ct.id,
    u.first_name,
    u.last_name,
    c.class_id,
    c.name as class
from class_teachers ct
join users u on ct.teacher_id = u.user_id
join classes c on ct.class_id = c.class_id
order by c.name
`

type ListCLassTeachersRow struct {
	ID        uuid.UUID `json:"id"`
	FirstName string    `json:"first_name"`
	LastName  string    `json:"last_name"`
	ClassID   uuid.UUID `json:"class_id"`
	Class     string    `json:"class"`
}

func (q *Queries) ListCLassTeachers(ctx context.Context) ([]ListCLassTeachersRow, error) {
	rows, err := q.db.Query(ctx, listCLassTeachers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListCLassTeachersRow{}
	for rows.Next() {
		var i ListCLassTeachersRow
		if err := rows.Scan(
			&i.ID,
			&i.FirstName,
			&i.LastName,
			&i.ClassID,
			&i.Class,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const upSertClassTeacher = `-- name: UpSertClassTeacher :one
insert into class_teachers (teacher_id, class_id)
    values ($1, $2)
    on conflict (teacher_id, class_id)
do update
    set
        teacher_id = excluded.teacher_id,
        class_id = excluded.class_id 
returning id
`

type UpSertClassTeacherParams struct {
	TeacherID uuid.UUID `json:"teacher_id"`
	ClassID   uuid.UUID `json:"class_id"`
}

func (q *Queries) UpSertClassTeacher(ctx context.Context, arg UpSertClassTeacherParams) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, upSertClassTeacher, arg.TeacherID, arg.ClassID)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}
