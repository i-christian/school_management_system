// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: reports.sql

package database

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
	dto "school_management_system/internal/dto"
)

const getStudentReportCard = `-- name: GetStudentReportCard :one
SELECT 
    sgv.student_id,
    sgv.student_no,
    sgv.last_name,
    sgv.first_name,
    sgv.middle_name,
    sgv.class_id,
    sgv.class_name,
    sgv.grades,
    r.content_class_teacher AS class_teacher_remark,
    r.content_head_teacher AS head_teacher_remark
FROM student_grades_view sgv
LEFT JOIN remarks r 
    ON r.student_id = sgv.student_id 
WHERE sgv.student_id = $1
`

type GetStudentReportCardRow struct {
	StudentID          uuid.UUID     `json:"student_id"`
	StudentNo          string        `json:"student_no"`
	LastName           string        `json:"last_name"`
	FirstName          string        `json:"first_name"`
	MiddleName         pgtype.Text   `json:"middle_name"`
	ClassID            uuid.UUID     `json:"class_id"`
	ClassName          string        `json:"class_name"`
	Grades             dto.GradesMap `json:"grades"`
	ClassTeacherRemark pgtype.Text   `json:"class_teacher_remark"`
	HeadTeacherRemark  pgtype.Text   `json:"head_teacher_remark"`
}

func (q *Queries) GetStudentReportCard(ctx context.Context, studentID uuid.UUID) (GetStudentReportCardRow, error) {
	row := q.db.QueryRow(ctx, getStudentReportCard, studentID)
	var i GetStudentReportCardRow
	err := row.Scan(
		&i.StudentID,
		&i.StudentNo,
		&i.LastName,
		&i.FirstName,
		&i.MiddleName,
		&i.ClassID,
		&i.ClassName,
		&i.Grades,
		&i.ClassTeacherRemark,
		&i.HeadTeacherRemark,
	)
	return i, err
}
