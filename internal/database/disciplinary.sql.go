// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: disciplinary.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createDisciplinaryRecord = `-- name: CreateDisciplinaryRecord :one
INSERT INTO discipline_records (student_id, term_id, date, description, action_taken, reported_by, notes)
VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING discipline_id, student_id, term_id, date, description, action_taken, reported_by, notes
`

type CreateDisciplinaryRecordParams struct {
	StudentID   pgtype.UUID
	TermID      pgtype.UUID
	Date        pgtype.Date
	Description string
	ActionTaken pgtype.Text
	ReportedBy  pgtype.UUID
	Notes       pgtype.Text
}

func (q *Queries) CreateDisciplinaryRecord(ctx context.Context, arg CreateDisciplinaryRecordParams) (DisciplineRecord, error) {
	row := q.db.QueryRow(ctx, createDisciplinaryRecord,
		arg.StudentID,
		arg.TermID,
		arg.Date,
		arg.Description,
		arg.ActionTaken,
		arg.ReportedBy,
		arg.Notes,
	)
	var i DisciplineRecord
	err := row.Scan(
		&i.DisciplineID,
		&i.StudentID,
		&i.TermID,
		&i.Date,
		&i.Description,
		&i.ActionTaken,
		&i.ReportedBy,
		&i.Notes,
	)
	return i, err
}

const deleteDisciplinaryRecord = `-- name: DeleteDisciplinaryRecord :exec
DELETE FROM discipline_records WHERE discipline_id = $1
`

func (q *Queries) DeleteDisciplinaryRecord(ctx context.Context, disciplineID pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteDisciplinaryRecord, disciplineID)
	return err
}

const editDisciplinaryRecord = `-- name: EditDisciplinaryRecord :exec
UPDATE discipline_records
SET description = COALESCE($2, description),
action_taken = COALESCE($3, action_taken),
notes = COALESCE($4, notes)
WHERE discipline_id = $1
`

type EditDisciplinaryRecordParams struct {
	DisciplineID pgtype.UUID
	Description  string
	ActionTaken  pgtype.Text
	Notes        pgtype.Text
}

func (q *Queries) EditDisciplinaryRecord(ctx context.Context, arg EditDisciplinaryRecordParams) error {
	_, err := q.db.Exec(ctx, editDisciplinaryRecord,
		arg.DisciplineID,
		arg.Description,
		arg.ActionTaken,
		arg.Notes,
	)
	return err
}

const getDisciplinaryRecord = `-- name: GetDisciplinaryRecord :one
SELECT 
    students.last_name,
    students.first_name,
    discipline_records.date,
    discipline_records.description AS offense,
    discipline_records.action_taken,
    discipline_records.notes,
    term.name AS term_name,
    users.last_name As reporter_last_name,
    users.first_name As reporter_first_name  
FROM discipline_records
INNER JOIN students
ON
discipline_records.student_id = students.student_id
INNER JOIN users
ON
discipline_records.reported_by = users.user_id
INNER JOIN term
ON
discipline_records.term_id = term.term_id
WHERE students.student_id = $1
`

type GetDisciplinaryRecordRow struct {
	LastName          string
	FirstName         string
	Date              pgtype.Date
	Offense           string
	ActionTaken       pgtype.Text
	Notes             pgtype.Text
	TermName          string
	ReporterLastName  string
	ReporterFirstName string
}

func (q *Queries) GetDisciplinaryRecord(ctx context.Context, studentID pgtype.UUID) (GetDisciplinaryRecordRow, error) {
	row := q.db.QueryRow(ctx, getDisciplinaryRecord, studentID)
	var i GetDisciplinaryRecordRow
	err := row.Scan(
		&i.LastName,
		&i.FirstName,
		&i.Date,
		&i.Offense,
		&i.ActionTaken,
		&i.Notes,
		&i.TermName,
		&i.ReporterLastName,
		&i.ReporterFirstName,
	)
	return i, err
}

const listDisciplinaryRecords = `-- name: ListDisciplinaryRecords :many
SELECT 
    students.last_name,
    students.first_name,
    discipline_records.date,
    discipline_records.description AS offense,
    discipline_records.action_taken,
    discipline_records.notes,
    term.name AS term_name,
    users.last_name As reporter_last_name,
    users.first_name As reporter_first_name  
FROM discipline_records
INNER JOIN students
ON
discipline_records.student_id = students.student_id
INNER JOIN users
ON
discipline_records.reported_by = users.user_id
INNER JOIN term
ON
discipline_records.term_id = term.term_id
`

type ListDisciplinaryRecordsRow struct {
	LastName          string
	FirstName         string
	Date              pgtype.Date
	Offense           string
	ActionTaken       pgtype.Text
	Notes             pgtype.Text
	TermName          string
	ReporterLastName  string
	ReporterFirstName string
}

func (q *Queries) ListDisciplinaryRecords(ctx context.Context) ([]ListDisciplinaryRecordsRow, error) {
	rows, err := q.db.Query(ctx, listDisciplinaryRecords)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListDisciplinaryRecordsRow
	for rows.Next() {
		var i ListDisciplinaryRecordsRow
		if err := rows.Scan(
			&i.LastName,
			&i.FirstName,
			&i.Date,
			&i.Offense,
			&i.ActionTaken,
			&i.Notes,
			&i.TermName,
			&i.ReporterLastName,
			&i.ReporterFirstName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
