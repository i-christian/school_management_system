// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: subjects.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createSubject = `-- name: CreateSubject :one
INSERT INTO subjects (class_id, name) VALUES ($1, $2) RETURNING subject_id, class_id, name
`

type CreateSubjectParams struct {
	ClassID pgtype.UUID
	Name    string
}

func (q *Queries) CreateSubject(ctx context.Context, arg CreateSubjectParams) (Subject, error) {
	row := q.db.QueryRow(ctx, createSubject, arg.ClassID, arg.Name)
	var i Subject
	err := row.Scan(&i.SubjectID, &i.ClassID, &i.Name)
	return i, err
}

const deleteSubject = `-- name: DeleteSubject :exec
DELETE FROM subjects WHERE subject_id = $1
`

func (q *Queries) DeleteSubject(ctx context.Context, subjectID pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteSubject, subjectID)
	return err
}

const editSubject = `-- name: EditSubject :exec
UPDATE subjects
SET class_id = COALESCE($2, class_id),
name = COALESCE($3, name)
WHERE subject_id = $1
`

type EditSubjectParams struct {
	SubjectID pgtype.UUID
	ClassID   pgtype.UUID
	Name      string
}

func (q *Queries) EditSubject(ctx context.Context, arg EditSubjectParams) error {
	_, err := q.db.Exec(ctx, editSubject, arg.SubjectID, arg.ClassID, arg.Name)
	return err
}

const getSubject = `-- name: GetSubject :one
SELECT subject_id, class_id, name FROM subjects WHERE name = $1
`

func (q *Queries) GetSubject(ctx context.Context, name string) (Subject, error) {
	row := q.db.QueryRow(ctx, getSubject, name)
	var i Subject
	err := row.Scan(&i.SubjectID, &i.ClassID, &i.Name)
	return i, err
}

const listSubjects = `-- name: ListSubjects :many
SELECT subject_id, class_id, name FROM subjects ORDER BY name
`

func (q *Queries) ListSubjects(ctx context.Context) ([]Subject, error) {
	rows, err := q.db.Query(ctx, listSubjects)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Subject
	for rows.Next() {
		var i Subject
		if err := rows.Scan(&i.SubjectID, &i.ClassID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
