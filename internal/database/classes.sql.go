// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: classes.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createClass = `-- name: CreateClass :exec
INSERT INTO classes (name)
VALUES ($1)
ON CONFLICT (name) DO NOTHING
RETURNING class_id, name
`

func (q *Queries) CreateClass(ctx context.Context, name string) error {
	_, err := q.db.Exec(ctx, createClass, name)
	return err
}

const deleteClass = `-- name: DeleteClass :exec
DELETE FROM classes WHERE class_id = $1
`

func (q *Queries) DeleteClass(ctx context.Context, classID uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteClass, classID)
	return err
}

const editClass = `-- name: EditClass :exec
UPDATE classes
SET name = COALESCE($2, name)
WHERE class_id = $1
`

type EditClassParams struct {
	ClassID uuid.UUID `json:"class_id"`
	Name    string    `json:"name"`
}

func (q *Queries) EditClass(ctx context.Context, arg EditClassParams) error {
	_, err := q.db.Exec(ctx, editClass, arg.ClassID, arg.Name)
	return err
}

const getClass = `-- name: GetClass :one
SELECT class_id, name FROM classes WHERE class_id = $1
`

func (q *Queries) GetClass(ctx context.Context, classID uuid.UUID) (Class, error) {
	row := q.db.QueryRow(ctx, getClass, classID)
	var i Class
	err := row.Scan(&i.ClassID, &i.Name)
	return i, err
}

const listClasses = `-- name: ListClasses :many
SELECT class_id, name FROM classes ORDER BY name
`

func (q *Queries) ListClasses(ctx context.Context) ([]Class, error) {
	rows, err := q.db.Query(ctx, listClasses)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Class{}
	for rows.Next() {
		var i Class
		if err := rows.Scan(&i.ClassID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
