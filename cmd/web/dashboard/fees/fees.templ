package fees

import (
	"github.com/google/uuid"
	"school_management_system/internal/database"
	"github.com/jackc/pgx/v5/pgtype"
	"strings"
	"strconv"
)

// ClassRoomData represents a classroom along with its fee records.
type ClassRoomData struct {
	ClassID         uuid.UUID                            `json:"class_id"`
	ClassName       string                               `json:"class_name"`
	RequiredTuition pgtype.Numeric                       `json:"required_tuition"`
	Students        []database.ListStudentFeesRecordsRow `json:"students"`
}

// FeesList renders a list of classes with their respective fee records.
templ FeesList(classRooms []ClassRoomData) {
	<section id="fees-list" class="mx-auto p-6">
		<div class="flex items-center justify-between mb-6">
			<h2 class="text-xl font-bold text-gray-800">Tuition Fees</h2>
			<button
				hx-get="/fees/structure"
				hx-target="#content-area"
				class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded hover:cursor-pointer text-sm"
				title="Set tuition"
			>
				<p class="flex gap-1 items-center justify-center">
					<i class="fas fa-cog mr-1"></i> <span class="md:block hidden">Set Tuition</span>
				</p>
			</button>
		</div>
		<nav class="mb-6">
			<ul class="flex space-x-2 overflow-x-auto">
				for _, class := range classRooms {
					<li>
						<button
							hx-get={ "/fees/class/" + class.ClassID.String() }
							hx-target="#fees-container"
							hx-swap="innerHTML"
							class="bg-gray-200 px-2 py-1 font-semibold cursor-pointer hover:bg-gray-300 rounded-md transition border border-gray-300 shadow-xs"
						>
							{ class.ClassName }
						</button>
					</li>
				}
			</ul>
		</nav>
		<div id="fees-container">
			{ children... }
		</div>
	</section>
}

// ClassFeesTable renders the fee payment details for a specific class.
templ ClassFeesTable(class ClassRoomData) {
	{{
		tuition, _ := class.RequiredTuition.Float64Value()
	}}
	<div class="mb-6 border border-gray-300 rounded-lg shadow-xs">
		<summary class="bg-gray-200 px-2 py-1 font-semibold cursor-pointer hover:bg-gray-300 rounded-md transition flex justify-between items-center">
			<div class="flex gap-3 items-center justify-center">
				{ class.ClassName }
			</div>
			<section class="text-gray-800 text-sm font-normal flex flex-row items-center justify-items-end gap-2">
				<p class="font-bold">Tuition: { strconv.FormatFloat(tuition.Float64, 'f', 2, 64) }</p>
			</section>
		</summary>
		<div class="overflow-x-auto bg-white p-4 rounded-b-lg">
			<table class="min-w-full table-auto border border-gray-300 rounded-lg shadow-xs">
				<thead class="bg-blue-500 text-white text-sm uppercase">
					<tr>
						<th class="border border-gray-300 px-4 py-2 text-left">Last Name</th>
						<th class="border border-gray-300 px-4 py-2 text-left">First Name</th>
						<th class="border border-gray-300 px-4 py-2 text-left">Middle Name</th>
						<th class="border border-gray-300 px-4 py-2 text-left">Status</th>
						<th class="border border-gray-300 px-4 py-2 text-left">Paid</th>
						<th class="border border-gray-300 px-4 py-2 text-left">Arrears</th>
						<th class="border border-gray-300 px-4 py-2 text-left">Actions</th>
					</tr>
				</thead>
				<tbody class="divide-y divide-gray-200 text-sm">
					for _, student := range class.Students {
						@FeesTableRow(student)
					}
				</tbody>
			</table>
		</div>
	</div>
}

// FeesTableRow renders a single student's fee record row.
templ FeesTableRow(student database.ListStudentFeesRecordsRow) {
	{{
		paid, _ := student.Paidamount.Float64Value()
		arrears, _ := student.Arrears.Float64Value()
		hasFeesRecord := student.FeesID.Valid
		feesID := ""
		if hasFeesRecord {
			feesID = student.FeesID.String()
		}
	}}
	<tr class="bg-gray-50 hover:bg-gray-100 transition">
		<td class="border border-gray-300 px-4 py-2">{ student.LastName.String }</td>
		<td class="border border-gray-300 px-4 py-2">{ student.FirstName.String }</td>
		<td class="border border-gray-300 px-4 py-2">
			if student.MiddleName.Valid {
				{ student.MiddleName.String }
			} else {
				<span class="text-gray-400">N/A</span>
			}
		</td>
		<td class="border border-gray-300 px-4 py-2">{ student.Status }</td>
		<td class="border border-gray-300 px-4 py-2">{ strconv.FormatFloat(paid.Float64, 'f', 2, 64) }</td>
		<td class="border border-gray-300 px-4 py-2">{ strconv.FormatFloat(arrears.Float64, 'f', 2, 64) }</td>
		<td class="border border-gray-300 px-4 py-2">
			<div class="flex space-x-2">
				if hasFeesRecord {
					<button
						hx-get={ "/fees/" + feesID + "/edit" }
						hx-target="#fees-container"
						class="bg-green-500 hover:bg-green-700 text-white font-bold py-2 px-4 rounded hover:cursor-pointer text-sm"
						title="Edit Fees Record"
					>
						<p class="flex gap-1 items-center justify-center">
							<i class="fas fa-edit mr-1"></i>
							<span class="lg:block hidden">Edit Fees</span>
						</p>
					</button>
				} else {
					<button
						hx-get={ "/fees/create/" + student.ClassID.String() + "?student_id=" + student.StudentID.String() }
						hx-target="#fees-container"
						class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded hover:cursor-pointer text-sm"
						title="Add Fees Record"
					>
						<p class="flex gap-1 items-center justify-center">
							<i class="fas fa-plus mr-1"></i>
							<span class="lg:block hidden">Add Fees</span>
						</p>
					</button>
				}
			</div>
		</td>
	</tr>
}

//Sets up a a fees structure for the selected class and given tuition amount
templ CreateStructure(classes []database.Class) {
	<div class="max-w-3xl mx-auto p-6">
		<div class="bg-white rounded-lg shadow-lg overflow-hidden">
			<header class="bg-blue-600 px-6 py-4">
				<h2 class="text-white text-xl font-bold">Create Fees Structure</h2>
			</header>
			<form
				hx-post="/fees/structure"
				hx-target="#content-area"
				hx-swap="innerHTML"
				class="px-6 py-6"
			>
				<div class="grid grid-cols-1 md:grid-cols-2 gap-6">
					<section>
						<label class="block text-gray-700 font-semibold mb-2">
							Class
						</label>
						<select
							type="text"
							name="class_id"
							required
							class="w-full border border-gray-300 rounded-md p-3 focus:outline-none focus:ring-2 focus:ring-blue-500"
						>
							for _, class := range classes {
								if !strings.HasPrefix(class.Name, "Graduates - ") {
									<option value={ class.ClassID.String() }>
										{ 
									class.Name }
									</option>
								}
							}
						</select>
					</section>
					<section>
						<label class="block text-gray-700 font-semibold mb-2">Tuition</label>
						<input
							type="decimal"
							name="required"
							min="0"
							max="10000000000000"
							required
							class="w-full border border-gray-300 rounded-md p-3 focus:outline-none focus:ring-2 focus:ring-green-500"
						/>
					</section>
					<section class="flex justify-end mt-8 space-x-4">
						<button
							type="button"
							hx-get="/fees"
							hx-target="#content-area"
							hx-swap="innerHTML"
							class="bg-gray-500 hover:bg-gray-600 text-white font-semibold rounded-md py-2 px-4 focus:outline-none focus:ring-2 focus:ring-gray-400"
						>
							Cancel
						</button>
						<button
							type="submit"
							class="bg-blue-600 hover:bg-blue-700 text-white font-semibold rounded-md py-2 px-4 focus:outline-none focus:ring-2 focus:ring-blue-500"
						>
							Save
						</button>
					</section>
				</div>
			</form>
		</div>
	</div>
}

// CreateFeesRecordForm renders a form to create a new fees record for a student.
templ CreateFeesRecordForm(feesStructureID string, students []database.Student, classID string, studentID string) {
	<div class="max-w-3xl mx-auto p-6">
		<div class="bg-white rounded-lg shadow-lg overflow-hidden">
			<header class="bg-blue-600 px-6 py-4">
				<h2 class="text-white text-xl font-bold">Create New Fees Record</h2>
			</header>
			<form
				hx-post={ "/fees/create/" }
				hx-target="#content-area"
				hx-swap="innerHTML"
				class="px-6 py-6"
			>
				<input type="hidden" name="fee_structure_id" value={ feesStructureID }/>
				<div class="grid grid-cols-1 md:grid-cols-2 gap-6">
					<section>
						<label class="block text-gray-700 font-semibold mb-2">
							Student
						</label>
						<select
							type="text"
							name="student_id"
							required
							class="w-full border border-gray-300 rounded-md p-3 focus:outline-none focus:ring-2 focus:ring-blue-500"
						>
							<option value="">Select Student</option>
							for _, student := range students {
								if student.StudentID.String() == studentID {
									<option
										value={ student.StudentID.String() }
										selected={ student.StudentID.String() }
									>
										{ student.LastName + ", " + student.FirstName + "," + student.MiddleName.String }
									</option>
								}
							}
						</select>
					</section>
					<section>
						<label class="block text-gray-700 font-semibold mb-2">Paid Amount</label>
						<input
							type="number"
							name="paid"
							step="0.01"
							min="0"
							required
							class="w-full border border-gray-300 rounded-md p-3 focus:outline-none focus:ring-2 focus:ring-green-500"
						/>
					</section>
				</div>
				<section class="flex justify-end mt-8 space-x-4">
					<button
						type="button"
						hx-get={ "/fees/class/" + classID }
						hx-target="#fees-container"
						hx-swap="innerHTML"
						class="bg-gray-500 hover:bg-gray-600 text-white font-semibold rounded-md py-2 px-4 focus:outline-none focus:ring-2 focus:ring-gray-400"
					>
						Cancel
					</button>
					<button
						type="submit"
						class="bg-blue-600 hover:bg-blue-700 text-white font-semibold rounded-md py-2 px-4 focus:outline-none focus:ring-2 focus:ring-blue-500"
					>
						Save
					</button>
				</section>
			</form>
		</div>
	</div>
}

// EditFeesRecordForm renders a form to create a new fees record for a student.
templ EditFeesRecordForm(fees database.GetFeesRecordRow, feesID string) {
	{{
		paid, _ := fees.Paidamount.Float64Value()
		arrears, _ := fees.Arrears.Float64Value()
	}}
	<div class="max-w-3xl mx-auto p-6">
		<div class="bg-white rounded-lg shadow-lg overflow-hidden">
			<header class="bg-blue-500 px-6 py-4">
				<h2 class="text-white text-xl font-bold">Edit Fees Record</h2>
			</header>
			<form
				hx-put={ "/fees/edit/" + feesID }
				hx-target="#content-area"
				hx-swap="innerHTML"
				class="px-6 py-6"
			>
				<div class="grid grid-cols-1 md:grid-cols-2 gap-6">
					<section class=" flex items-center gap-2">
						<label class="block font-medium text-gray-700">Student Name:</label>
						<p class="text-gray-800 font-medium">{ fees.FirstName + " "+ fees.LastName } </p>
					</section>
					<section class="hidden">
						<input
							type="hidden"
							name="available_amount"
							value={ strconv.FormatFloat(paid.Float64, 'f', 2, 64) }
							required
							class="shadow-xs w-full border border-gray-300 rounded-md p-2.5 focus:outline-none focus:ring-2 focus:ring-blue-500"
						/>
					</section>
					<section class="hidden">
						<input
							type="hidden"
							name="arrears_amount"
							value={ strconv.FormatFloat(arrears.Float64, 'f', 2, 64) }
							required
							class="shadow-xs w-full border border-gray-300 rounded-md p-2.5 focus:outline-none focus:ring-2 focus:ring-blue-500"
						/>
					</section>
					<section class=" flex items-center gap-2">
						<label class="block text-sm font-medium text-gray-700">Paid Amount</label>
						<p class="text-base font-medium text-gray-800 py-2 px-3 bg-gray-100 rounded-md">{ strconv.FormatFloat(paid.Float64, 'f', 2, 64) } </p>
					</section>
					<section class=" flex items-center gap-2">
						<label class="block text-sm font-medium text-gray-700">Total Arrears</label>
						<p class="text-base font-medium text-gray-800 py-2 px-3 bg-gray-100 rounded-md">{ strconv.FormatFloat(arrears.Float64, 'f', 2, 64) } </p>
					</section>
					<section>
						<label class="block text-sm font-medium text-gray-700 mb-2">Additional Amount</label>
						<input
							type="number"
							title="Enter additional payment"
							name="additional_amount"
							step="0.01"
							required
							class="shadow-sm w-full border border-gray-300 rounded-md p-2.5 focus:outline-none focus:ring-2 focus:ring-blue-500"
						/>
					</section>
				</div>
				<section class="flex justify-end mt-8 space-x-4">
					<button
						type="button"
						hx-get="/fees"
						hx-target="#content-area"
						hx-swap="innerHTML"
						class="bg-gray-400 hover:bg-gray-500 text-white font-medium rounded-md py-2 px-4 focus:outline-none focus:ring-2 focus:ring-gray-300"
					>
						Cancel
					</button>
					<button
						type="submit"
						class="bg-blue-600 hover:bg-blue-700 text-white font-semibold rounded-md py-2 px-4 focus:outline-none focus:ring-2 focus:ring-blue-500"
					>
						Save
					</button>
				</section>
			</form>
		</div>
	</div>
}
