package assignments

import (
	"school_management_system/internal/database"
	"strconv"
)

// templ AssignmentsList renders a table with assignments grouped by teacher and class.
templ AssignmentsList(groupedAssignments map[string]map[string][]database.ListAssignmentsRow) {
	<div class="container mx-auto p-6">
		<div class="flex items-center justify-between mb-6">
			<h2 class="text-2xl font-bold">Teacher Assignments</h2>
			<button
				class="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 focus:outline-none"
				hx-get="/academics/assignments/create"
				hx-target="#content-area"
				hx-swap="innerHTML"
			>
				<i class="fas fa-plus mr-2"></i> Create Assignment
			</button>
		</div>
		for teacher, classMap := range groupedAssignments {
			<div class="mb-8 border rounded-lg shadow-sm p-4">
				<h3 class="text-xl font-semibold mb-4">{ teacher }</h3>
				for class, assignments := range classMap {
					<details class="mb-4 border rounded-md">
						<summary class="cursor-pointer bg-gray-200 px-4 py-2">
							{ class }
							<span class="text-sm text-gray-600">
								(
								if len(assignments) > 1 {
									{ strconv.Itoa(len(assignments)) + " assignments" }
								} else {
									{ strconv.Itoa(len(assignments)) + " assignment" }
								}
								)
							</span>
						</summary>
						<table class="w-full border-collapse border border-gray-300 mt-2">
							<thead>
								<tr class="bg-gray-100">
									<th class="border border-gray-300 px-4 py-2 text-left">Subject</th>
									<th class="border border-gray-300 px-4 py-2 text-left">Actions</th>
								</tr>
							</thead>
							<tbody>
								for _, assignment := range assignments {
									<tr class="hover:bg-gray-100">
										<td class="border border-gray-300 px-4 py-2">{ assignment.Subject }</td>
										<td class="border border-gray-300 px-4 py-2">
											<div class="flex space-x-2">
												<button
													class="px-3 py-1 text-sm text-white bg-yellow-500 rounded-md hover:bg-yellow-600"
													hx-get={ "/academics/assignments/" + assignment.ID.String() + "/edit" }
													hx-target="#content-area"
													hx-swap="innerHTML"
												>
													<i class="fas fa-edit mr-1"></i> Edit
												</button>
												<button
													class="px-3 py-1 text-sm text-white bg-red-500 rounded-md hover:bg-red-600"
													hx-delete={ "/academics/assignments/" + assignment.ID.String() }
													hx-target="#content-area"
													hx-swap="outerHTML"
												>
													<i class="fas fa-trash mr-1"></i> Delete
												</button>
											</div>
										</td>
									</tr>
								}
							</tbody>
						</table>
					</details>
				}
			</div>
		}
	</div>
}

// templ AssignmentForm renders the create-assignment form with dropdowns.
templ AssignmentForm(teachers []database.ListUsersRow, subjects []database.ListAllSubjectsRow) {
	<div class="max-w-3xl mx-auto p-6">
		<div class="bg-white rounded-lg shadow-lg overflow-hidden">
			<header class="bg-blue-600 px-6 py-4">
				<h2 class="text-white text-xl font-bold">Create Assignment</h2>
			</header>
			<form
				hx-post="/academics/assignments"
				hx-target="#content-area"
				hx-swap="innerHTML"
				class="px-6 py-6"
			>
				<div class="grid grid-cols-1 gap-6">
					<section>
						<label class="block text-gray-700 font-semibold mb-2">Teacher</label>
						<select
							name="teacher_id"
							required
							class="w-full border border-gray-300 rounded-md p-3 focus:outline-none focus:ring-2 focus:ring-blue-500"
						>
							for _, teacher := range teachers {
								if teacher.Role != "admin" && teacher.Role != "accountant" {
									<option value={ teacher.UserID.String() }>
										{ teacher.FirstName } { teacher.LastName }
									</option>
								}
							}
						</select>
					</section>
					<section>
						<label class="block text-gray-700 font-semibold mb-2">Subject &amp; Class</label>
						<select
							name="subject_class"
							required
							class="w-full border border-gray-300 rounded-md p-3 focus:outline-none focus:ring-2 focus:ring-blue-500"
						>
							for _, subject := range subjects {
								<option value={ subject.Subjectid.String() + "=" + subject.Classid.String() }>
									{ subject.Classname } - { subject.Subjectname }
								</option>
							}
						</select>
					</section>
				</div>
				<section class="flex justify-end mt-8 space-x-4">
					<button
						type="button"
						hx-get="/academics/assignments"
						hx-push-url="true"
						hx-target="#content-area"
						hx-swap="innerHTML"
						class="bg-gray-500 hover:bg-gray-600 text-white font-semibold rounded-md py-2 px-4 focus:outline-none focus:ring-2 focus:ring-gray-400"
					>
						Cancel
					</button>
					<button
						type="submit"
						class="bg-blue-600 hover:bg-blue-700 text-white font-semibold rounded-md py-2 px-4 focus:outline-none focus:ring-2 focus:ring-blue-500"
					>
						Save
					</button>
				</section>
			</form>
		</div>
	</div>
}

// templ EditAssignmentForm renders the edit-assignment form using dropdowns like the create form.
templ EditAssignmentForm(assignment database.GetAssignmentRow, teachers []database.ListUsersRow, subjects []database.ListAllSubjectsRow) {
	<div class="max-w-3xl mx-auto p-6">
		<div class="bg-white rounded-lg shadow-lg overflow-hidden">
			<header class="bg-blue-600 px-6 py-4">
				<h2 class="text-white text-xl font-bold">Edit Assignment</h2>
			</header>
			<form
				hx-put={ "/academics/assignments/" + assignment.ID.String() }
				hx-target="#content-area"
				hx-swap="innerHTML"
				class="px-6 py-6"
			>
				<div class="grid grid-cols-1 gap-6">
					<section>
						<label class="block text-gray-700 font-semibold mb-2">Teacher</label>
						<select
							name="teacher_id"
							required
							class="w-full border border-gray-300 rounded-md p-3 focus:outline-none focus:ring-2 focus:ring-blue-500"
						>
							for _, teacher := range teachers {
								if teacher.Role != "admin" && teacher.Role != "accountant" {
									<option value={ teacher.UserID.String() } selected={ assignment.TeacherID.String() }>
										{ assignment.TeacherFirstname } { assignment.TeacherLastname }
									</option>
								}
							}
						</select>
					</section>
					<section>
						<label class="block text-gray-700 font-semibold mb-2">Subject &amp; Class</label>
						<select
							name="subject_class"
							required
							class="w-full border border-gray-300 rounded-md p-3 focus:outline-none focus:ring-2 focus:ring-blue-500"
						>
							for _, subject := range subjects {
								selected := (subject.Subjectid == assignment.SubjectID) && (subject.Classid == assignment.ClassID)
								<option value={ subject.Subjectid.String() + "=" + subject.Classid.String() } selected={ assignment.SubjectID.String() }>
									{ assignment.Classroom } - { assignment.Subject }
								</option>
							}
						</select>
					</section>
				</div>
				<section class="flex justify-end mt-8 space-x-4">
					<button
						type="button"
						hx-get="/academics/assignments"
						hx-push-url="true"
						hx-target="#content-area"
						hx-swap="innerHTML"
						class="bg-gray-500 hover:bg-gray-600 text-white font-semibold rounded-md py-2 px-4 focus:outline-none focus:ring-2 focus:ring-gray-400"
					>
						Cancel
					</button>
					<button
						type="submit"
						class="bg-blue-600 hover:bg-blue-700 text-white font-semibold rounded-md py-2 px-4 focus:outline-none focus:ring-2 focus:ring-blue-500"
					>
						Save
					</button>
				</section>
			</form>
		</div>
	</div>
}
