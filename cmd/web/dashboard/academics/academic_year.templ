package academics

import "school_management_system/internal/database"
import "time"

// templ AcademicYearsTermsList renders a list of academic years with collapsible terms.
templ AcademicYearsTermsList(years []database.AcademicYear) {
	<div class="container mx-auto p-6">
		<div class="flex items-center justify-between mb-4">
			<h2 class="text-xl font-bold">Academic Years &amp; Terms</h2>
			<button
				class="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 focus:outline-none"
				hx-get="/academics/create"
				hx-target="#content-area"
				hx-swap="innerHTML"
			>
				<i class="fas fa-plus mr-2"></i> Create Academic Year
			</button>
		</div>
		if len(years) == 0 {
			<div class="bg-yellow-100 border-l-4 border-yellow-500 text-yellow-700 p-4" role="alert">
				<p class="font-bold">Nothing Found</p>
				<p>No academic years records found in the system</p>
			</div>
		} else {
			<section>
				<ul id="academic-years-list" class="space-y-4">
					for _, year := range years {
						<li class="p-4 bg-gray-100 rounded shadow">
							<details class="group">
								<summary class="flex items-center justify-between cursor-pointer bg-gray-200 px-4 py-2 rounded">
									<div>
										<h3 class="text-lg font-semibold">{ year.Name }</h3>
										<p class="text-sm text-gray-600">
											{ year.StartDate.Time.Format("Jan 2, 2006") } - { year.EndDate.Time.Format("Jan 2, 2006") }
										</p>
									</div>
									<div class="flex space-x-2">
										<button
											class="flex items-center px-3 py-1 text-sm text-white bg-yellow-500 rounded-md hover:bg-yellow-600 hover:cursor-pointer"
											hx-get={ "/academics/years/" + year.AcademicYearID.String() + "/edit" }
											hx-target="#content-area"
											hx-swap="innerHTML"
											onclick="event.stopPropagation()"
										>
											<i class="fas fa-edit mr-1"></i> Edit
										</button>
										<button
											class="flex items-center px-3 py-1 text-sm text-white bg-gray-500 rounded-md hover:bg-gray-600 hover:cursor-pointer"
											hx-put={ "/academics/years/" + year.AcademicYearID.String() + "/toggle" }
											hx-target="#content-area"
											hx-swap="outerHTML"
											onclick="event.stopPropagation()"
										>
											if year.Active == true {
												<i class="fas fa-toggle-on mr-1"></i> Active 
											} else {
												<i class="fas fa-toggle-off mr-1"></i> Inactive
											}
										</button>
										<button
											class="flex items-center px-3 py-1 text-sm text-white bg-green-500 rounded-md hover:bg-green-600 hover:cursor-pointer"
											hx-get={ "/academics/terms/" + year.AcademicYearID.String() + "/create" }
											hx-target="#content-area"
											hx-swap="innerHTML"
											onclick="event.stopPropagation()"
										>
											<i class="fas fa-plus mr-1"></i> Add Term
										</button>
									</div>
								</summary>
								<div class="mt-4">
									<h4 class="text-md font-medium mb-2">Terms</h4>
									<ul id={ "terms-list-" + year.AcademicYearID.String() } class="space-y-2">
										<li class="p-2 bg-gray-200 rounded text-center text-sm">
											<div
												hx-get={ "/academics/year/" + year.AcademicYearID.String() + "/terms" }
												hx-target={ "#terms-list-" + year.AcademicYearID.String() }
												hx-trigger="revealed"
												hx-swap="innerHTML"
											>
												Loading...
											</div>
										</li>
									</ul>
								</div>
							</details>
						</li>
					}
				</ul>
			</section>
		}
	</div>
}

// templ TermsList renders the list of terms for an academic year.
templ TermsList(terms []database.ListTermsRow) {
	for _, term := range terms {
		<li class="p-3 bg-white rounded shadow flex justify-between items-center">
			<div>
				<h5 class="text-sm font-medium">{ term.AcademicTerm }</h5>
				<p class="text-xs text-gray-600">
					{ term.OpeningDate.Time.Format("Jan 2, 2006") } - { term.ClosingDate.Time.Format("Jan 2, 2006") }
				</p>
			</div>
			<div class="flex space-x-2">
				<!-- Edit Button -->
				<button
					class="flex items-center px-3 py-1 text-sm text-white bg-yellow-500 rounded-md hover:bg-yellow-600 hover:cursor-pointer"
					hx-get={ "/academics/terms/" + term.TermID.String() + "/edit" }
					hx-target="#content-area"
					hx-swap="innerHTML"
				>
					<i class="fas fa-edit mr-1"></i> Edit
				</button>
				<!-- Toggle Status Button -->
				<button
					class="flex items-center px-3 py-1 text-sm text-white bg-gray-500 rounded-md hover:bg-gray-600 hover:cursor-pointer"
					hx-put={ "/academics/terms/" + term.TermID.String() + "/toggle" }
					hx-target="#content-area"
					hx-swap="outerHTML"
				>
					if term.Active == true {
						<i class="fas fa-toggle-on mr-1"></i> Active
					} else {
						<i class="fas fa-toggle-off mr-1"></i> Inactive
					}
				</button>
			</div>
		</li>
	}
}

templ AcademicYearForm() {
	<div class="max-w-3xl mx-auto p-6">
		<div class="bg-white rounded-lg shadow-lg overflow-hidden">
			<header class="bg-blue-600 px-6 py-4">
				<h2 class="text-white text-xl font-bold">Create Academic Year</h2>
			</header>
			<form
				hx-post="/academics/years"
				hx-target="#content-area"
				hx-swap="innerHTML"
				class="px-6 py-6"
			>
				<div class="grid grid-cols-1 md:grid-cols-2 gap-6">
					<section>
						<label class="block text-gray-700 font-semibold mb-2">
							Name
						</label>
						<input
							type="text"
							name="name"
							minlength="6"
							maxlength="30"
							autocomplete="on"
							placeholder="e.g 2025/26 Academic Year"
							required
							class="w-full border border-gray-300 rounded-md p-3 focus:outline-none focus:ring-2 focus:ring-blue-500"
						/>
					</section>
					<section>
						<label class="block text-gray-700 font-semibold mb-2">Start Date</label>
						<input
							type="date"
							value="{time.Now().Format(2006-02-01)}"
							name="start"
							required
						/>
					</section>
					<section>
						<label class="block text-gray-700 font-semibold mb-2">End Date</label>
						<input
							type="date"
							value="{time.Now().Format(2006-02-01)}"
							name="end"
							required
						/>
					</section>
					<section class="flex justify-end mt-8 space-x-4">
						<button
							type="button"
							hx-get="/academics/years"
							hx-push-url="true"
							hx-target="#content-area"
							hx-swap="innerHTML"
							class="bg-gray-500 hover:bg-gray-600 text-white font-semibold rounded-md py-2 px-4 focus:outline-none focus:ring-2 focus:ring-gray-400"
						>
							Cancel
						</button>
						<button
							type="submit"
							class="bg-blue-600 hover:bg-blue-700 text-white font-semibold rounded-md py-2 px-4 focus:outline-none focus:ring-2 focus:ring-blue-500 hover:cursor-pointer"
						>
							Save
						</button>
					</section>
				</div>
			</form>
		</div>
	</div>
}

templ EditYearModal(academicYear database.AcademicYear) {
	<div class="max-w-3xl mx-auto p-6">
		<div class="bg-white rounded-lg shadow-lg overflow-hidden">
			<header class="bg-blue-600 px-6 py-4">
				<h2 class="text-white text-xl font-bold">Edit Academic Year</h2>
			</header>
			<form
				hx-put={ "/academics/years/" + academicYear.AcademicYearID.String() }
				hx-target="#content-area"
				hx-swap="innerHTML"
				class="px-6 py-6"
			>
				<div class="grid grid-cols-1 md:grid-cols-2 gap-6">
					<section>
						<label class="block text-gray-700 font-semibold mb-2">
							Name
						</label>
						<input
							type="text"
							name="name"
							minlength="6"
							maxlength="30"
							autocomplete="on"
							placeholder="e.g 2025/26 Academic Year"
							value={ academicYear.Name }
							required
							class="w-full border border-gray-300 rounded-md p-3 focus:outline-none focus:ring-2 focus:ring-blue-500"
						/>
					</section>
					<section>
						<label class="block text-gray-700 font-semibold mb-2">Start Date</label>
						<input
							type="date"
							value={ academicYear.StartDate.Time.Format(time.DateOnly) }
							name="start"
							required
						/>
					</section>
					<section>
						<label class="block text-gray-700 font-semibold mb-2">End Date</label>
						<input
							type="date"
							value={ academicYear.EndDate.Time.Format(time.DateOnly) }
							name="end"
							required
						/>
					</section>
					<section class="flex justify-end mt-8 space-x-4">
						<button
							type="button"
							hx-get="/academics/years"
							hx-push-url="true"
							hx-target="#content-area"
							hx-swap="innerHTML"
							class="bg-gray-500 hover:bg-gray-600 text-white font-semibold rounded-md py-2 px-4 focus:outline-none focus:ring-2 focus:ring-gray-400"
						>
							Cancel
						</button>
						<button
							type="submit"
							class="bg-blue-600 hover:bg-blue-700 text-white font-semibold rounded-md py-2 px-4 focus:outline-none focus:ring-2 focus:ring-blue-500"
						>
							Save
						</button>
					</section>
				</div>
			</form>
		</div>
	</div>
}
