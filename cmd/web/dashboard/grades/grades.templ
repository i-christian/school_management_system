package grades

import (
	"strconv"

	"school_management_system/internal/database"
)

// ClassGradesData groups the subjects and students for a single class.
type ClassGradesData struct {
	ClassName string
	Subjects  []database.ListAllSubjectsRow
	Students  []database.StudentGradesView
}

templ GradesList(classData []ClassGradesData) {
	<section id="grades-list" class="mx-auto p-6">
		<div class="flex items-center justify-between mb-6">
			<h2 class="text-2xl font-bold text-gray-800">Student Grades</h2>
		</div>
		for _, data := range classData {
			<details class="mb-6 border border-gray-300 rounded-lg shadow-sm">
				<summary class="bg-gray-200 px-5 py-3 font-semibold text-lg cursor-pointer hover:bg-gray-300 rounded-t-lg transition">
					{ data.ClassName }
				</summary>
				<div class="overflow-x-auto bg-white p-4 rounded-b-lg">
					<table class="min-w-full table-auto border border-gray-300 rounded-lg shadow-sm">
						<thead class="bg-blue-500 text-white text-sm uppercase">
							<tr>
								<th class="border border-gray-300 px-4 py-2 text-left">Student No</th>
								<th class="border border-gray-300 px-4 py-2 text-left">Last Name</th>
								<th class="border border-gray-300 px-4 py-2 text-left">First Name</th>
								<th class="border border-gray-300 px-4 py-2 text-left">Middle Name</th>
								for _, subj := range data.Subjects {
									<th class="border border-gray-300 px-4 py-2 text-left">{ subj.Subjectname }</th>
								}
							</tr>
						</thead>
						<tbody class="divide-y divide-gray-200 text-sm">
							for _, student := range data.Students {
								<tr class="bg-gray-50">
									<td class="border border-gray-300 px-4 py-2">{ student.StudentNo }</td>
									<td class="border border-gray-300 px-4 py-2">{ student.LastName }</td>
									<td class="border border-gray-300 px-4 py-2">{ student.FirstName }</td>
									<td class="border border-gray-300 px-4 py-2">
										if student.MiddleName.Valid {
											{ student.MiddleName.String }
										} else {
											<span class="text-gray-400">N/A</span>
										}
									</td>
									for _, subj := range data.Subjects {
										<td class="border border-gray-300 px-4 py-2">
											if grade, ok := student.Grades[subj.Subjectid]; ok {
												if grade.Score > 0 {
													{ strconv.FormatFloat(grade.Score, 'f', 2, 64) }
												} else {
													<span class="text-gray-400">N/A</span>
												}
												if grade.Remark != "" {
													<span class="text-xs text-gray-500">({ grade.Remark })</span>
												}
											} else {
												<span class="text-gray-400">N/A</span>
											}
										</td>
									}
								</tr>
							}
						</tbody>
					</table>
				</div>
			</details>
		}
	</section>
}

// templ EnterGradesForm renders the form to enter or update student grades.
templ EnterGradesForm(students []database.ListStudentsRow, subjects []database.ListAllSubjectsRow, terms database.GetCurrentTermRow) {
	<div class="max-w-3xl mx-auto p-6">
		<div class="bg-white rounded-lg shadow-lg overflow-hidden">
			<header class="bg-green-600 px-6 py-4">
				<h2 class="text-white text-xl font-bold">Enter Student Grades</h2>
			</header>
			<form
				hx-post="/grades/submit"
				hx-target="#content-area"
				hx-swap="innerHTML"
				class="px-6 py-6"
			>
				<div class="grid grid-cols-1 gap-6">
					<section>
						<label class="block text-gray-700 font-semibold mb-2">Student</label>
						<select
							name="student_id"
							required
							class="w-full border border-gray-300 rounded-md p-3 focus:outline-none focus:ring-2 focus:ring-green-500"
						>
							for _, student := range students {
								<option value={ student.StudentID.String() }>
									{ student.LastName }, { student.FirstName } ({ student.StudentNo })
								</option>
							}
						</select>
					</section>
					<section>
						<label class="block text-gray-700 font-semibold mb-2">Subject</label>
						<select
							name="subject_id"
							required
							class="w-full border border-gray-300 rounded-md p-3 focus:outline-none focus:ring-2 focus:ring-green-500"
						>
							for _, subject := range subjects {
								<option value={ subject.Subjectid.String() }>
									{ subject.Subjectname } ({ subject.Classname })
								</option>
							}
						</select>
					</section>
					<section>
						<label class="block text-gray-700 font-semibold mb-2">Term</label>
						<select
							name="term_id"
							required
							class="w-full border border-gray-300 rounded-md p-3 focus:outline-none focus:ring-2 focus:ring-green-500"
						>
							<option value={ terms.TermID.String() }>{ terms.AcademicTerm }</option>
						</select>
					</section>
					<section>
						<label class="block text-gray-700 font-semibold mb-2">Score</label>
						<input
							type="number"
							name="score"
							min="0"
							max="100"
							step="0.1"
							required
							class="w-full border border-gray-300 rounded-md p-3 focus:outline-none focus:ring-2 focus:ring-green-500"
						/>
					</section>
					<section>
						<label class="block text-gray-700 font-semibold mb-2">Remark (Optional)</label>
						<input
							type="text"
							name="remark"
							placeholder="E.g., Excellent, Needs Improvement"
							class="w-full border border-gray-300 rounded-md p-3 focus:outline-none focus:ring-2 focus:ring-green-500"
						/>
					</section>
				</div>
				<section class="flex justify-end mt-8 space-x-4">
					<button
						type="button"
						hx-get="/grades"
						hx-push-url="true"
						hx-target="#content-area"
						hx-swap="innerHTML"
						class="bg-gray-500 hover:bg-gray-600 text-white font-semibold rounded-md py-2 px-4 focus:outline-none focus:ring-2 focus:ring-gray-400"
					>
						Cancel
					</button>
					<button
						type="submit"
						class="bg-green-600 hover:bg-green-700 text-white font-semibold rounded-md py-2 px-4 focus:outline-none focus:ring-2 focus:ring-green-500"
					>
						Save Grade
					</button>
				</section>
			</form>
		</div>
	</div>
}
