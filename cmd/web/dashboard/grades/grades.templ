package grades

import (
	"strconv"

	"school_management_system/internal/database"
	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

// ClassGradesData groups the subjects and students for a single class.
type ClassGradesData struct {
	ClassName string
	Subjects  []database.ListAllSubjectsRow
	Students  []database.StudentGradesView
}

// TruncateString function truncates a subject name to 3 letters max
func TruncateString(str string, length int) string {
	if length <= 0 {
		return ""
	}

	truncated := ""
	count := 0
	for _, char := range str {
		truncated += string(char)
		count++
		if count >= length {
			break
		}
	}

	return truncated
}

templ GradesList(classData []ClassGradesData) {
	<section id="grades-list" class="mx-auto p-6">
		<div class="flex items-center justify-between mb-6">
			<h2 class="text-2xl font-bold text-gray-800">Student Grades</h2>
		</div>
		for _, data := range classData {
			<details class="mb-6 border border-gray-300 rounded-lg shadow-sm">
				<summary class="bg-gray-200 px-5 py-3 font-semibold text-lg cursor-pointer hover:bg-gray-300 rounded-t-lg transition">
					{ data.ClassName }
				</summary>
				<div class="overflow-x-auto bg-white p-4 rounded-b-lg">
					<table class="min-w-full table-auto border border-gray-300 rounded-lg shadow-sm">
						<thead class="bg-blue-500 text-white text-sm uppercase">
							<tr>
								<th class="border border-gray-300 px-4 py-2 text-left">Student No</th>
								<th class="border border-gray-300 px-4 py-2 text-left">Last Name</th>
								<th class="border border-gray-300 px-4 py-2 text-left">First Name</th>
								<th class="border border-gray-300 px-4 py-2 text-left">Middle Name</th>
								for _, subj := range data.Subjects {
									<th class="border border-gray-300 px-4 py-2 text-left">{ TruncateString(subj.Subjectname, 3) }</th>
								}
							</tr>
						</thead>
						<tbody class="divide-y divide-gray-200 text-sm">
							for _, student := range data.Students {
								<tr class="bg-gray-50">
									<td class="border border-gray-300 px-4 py-2">{ student.StudentNo }</td>
									<td class="border border-gray-300 px-4 py-2">{ student.LastName }</td>
									<td class="border border-gray-300 px-4 py-2">{ student.FirstName }</td>
									<td class="border border-gray-300 px-4 py-2">
										if student.MiddleName.Valid {
											{ student.MiddleName.String }
										} else {
											<span class="text-gray-400">N/A</span>
										}
									</td>
									for _, subj := range data.Subjects {
										<td class="border border-gray-300 px-4 py-2">
											if grade, ok := student.Grades[subj.Subjectid]; ok {
												if grade.Score > 0 {
													{ strconv.FormatFloat(grade.Score, 'f', 2, 64) }
												} else {
													<span class="text-gray-400">N/A</span>
												}
											} else {
												<span class="text-gray-400">N/A</span>
											}
										</td>
									}
								</tr>
							}
						</tbody>
					</table>
				</div>
			</details>
		}
	</section>
}

type GradeEntryData struct {
	ClassID        uuid.UUID
	ClassName      string
	TermID         uuid.UUID
	TermName       string
	AcademicYearID uuid.UUID
	TeacherID      uuid.UUID
	TeacherName    string
	Subjects       []Subject
	Students       []Student
}

type Subject struct {
	SubjectID   uuid.UUID
	SubjectName string
}

type Student struct {
	StudentID   uuid.UUID
	StudentNo   string
	StudentName string
}

// templ EnterGradesForm renders a table-based form for bulk grade entry.
templ EnterGradesForm(classRoom []GradeEntryData) {
	<div class="mx-auto p-6">
		<nav class="mb-6 bg-gray-100 p-4 rounded-lg shadow">
			<ul class="flex space-x-4 overflow-x-auto">
				for _, class := range classRoom {
					<li>
						<button
							hx-get={ "/grades/form/" + class.ClassID.String() }
							hx-target="#grades-form-container"
							hx-swap="innerHTML"
							class="px-4 py-2 bg-white border border-gray-300 rounded-md text-gray-700 hover:bg-gray-200 focus:outline-none focus:ring-2 focus:ring-green-500"
						>
							{ class.ClassName }
						</button>
					</li>
				}
			</ul>
		</nav>
		<div id="grades-form-container">
			{ children... }
		</div>
	</div>
}

// EnterGradesFormSingle renders a form for entering or updating grades for a specific class and term.
//
// @param class GradeEntryData - Contains the class information, including class name, ID, term details,
//        the list of subjects, and the enrolled students.
// @param currentGrades []database.ListGradesForClassRow - A list of existing grade records used to pre-populate
//        the form. For each student and subject combination, if a matching grade exists, its score and remark
//        are displayed in the corresponding input fields.
//
// The component ensures that each input field is pre-filled with either the available grade data or a default
// value (e.g., "0" for scores), thereby preventing the submission of an empty form that might overwrite valid
// data in the database.
//
templ EnterGradesFormSingle(class GradeEntryData, currentGrades []database.ListGradesForClassRow) {
	{{
		var matchingGrade pgtype.Float8
		var matchingRemark string
	}}
	<div class="bg-white rounded-lg shadow-lg overflow-hidden">
		<header class="bg-green-600 px-6 py-4 flex justify-between items-center">
			<h2 class="text-white text-xl font-bold">
				{ class.ClassName } (Term: { class.TermName })
			</h2>
		</header>
		<form id="grades-form" class="px-6 py-6 space-y-6">
			<input type="hidden" id="class_id" value={ class.ClassID.String() }/>
			<input type="hidden" id="term_id" value={ class.TermID.String() }/>
			<div class="overflow-x-auto">
				<table class="min-w-full border border-gray-300 rounded-lg shadow-xs">
					<thead class="bg-gray-100">
						<tr>
							<th class="border border-gray-300 px-4 py-2 text-left">Student</th>
							for _, subj := range class.Subjects {
								<th class="border border-gray-300 px-4 py-2 text-left">{ subj.SubjectName }</th>
							}
						</tr>
					</thead>
					<tbody class="divide-y divide-gray-200 text-sm">
						for _, student := range class.Students {
							<tr class="bg-white student-row" data-student-id={ student.StudentID.String() }>
								<td class="border border-gray-300 px-4 py-2 font-semibold">
									{ student.StudentName } ({ student.StudentNo })
								</td>
								for _, subj := range class.Subjects {
									<td class="border border-gray-300 px-2 py-2 align-top">
										<div class="mb-2">
											<label class="block text-xs text-gray-500 mb-1">Score</label>
											for _, grade := range currentGrades {
												if grade.StudentID == student.StudentID && grade.SubjectID == subj.SubjectID {
													{{
														matchingGrade, _ = grade.Score.Float64Value()
														matchingRemark = grade.Remark.String
														break
													}}
												}
											}
											<input
												type="number"
												data-subject-id={ subj.SubjectID.String() }
												min="0"
												max="100"
												step="0.1"
												value={ strconv.FormatFloat(matchingGrade.Float64, 'f', 2, 64) }
												class="score-input w-full border border-gray-300 rounded-md p-2 focus:outline-none focus:ring-2 focus:ring-green-500"
												placeholder="e.g. 75"
											/>
										</div>
										<div>
											<label class="block text-xs text-gray-500 mb-1">Remark (Optional)</label>
											<input
												type="text"
												data-subject-id={ subj.SubjectID.String() }
												value={ matchingRemark }
												class="remark-input w-full border border-gray-300 rounded-md p-2 text-sm focus:outline-none focus:ring-2 focus:ring-green-500"
												placeholder="e.g. Good work"
											/>
										</div>
									</td>
								}
							</tr>
						}
					</tbody>
				</table>
			</div>
			<section class="flex justify-end mt-4 space-x-4">
				<button
					type="button"
					onclick="window.location.href='/grades/myclasses'"
					class="bg-gray-500 hover:bg-gray-600 text-white font-semibold rounded-md py-2 px-4 focus:outline-none focus:ring-2 focus:ring-gray-400"
				>
					Cancel
				</button>
				<button
					type="submit"
					class="bg-green-600 hover:bg-green-700 text-white font-semibold rounded-md py-2 px-4 focus:outline-none focus:ring-2 focus:ring-green-500"
				>
					Save Grades for { class.ClassName }
				</button>
			</section>
		</form>
	</div>
	<div id="grades-popover" popover class="bg-white shadow-lg rounded-md p-4 w-96 text-center custom-popover">
		<p id="grades-popover-message" class="text-gray-700"></p>
	</div>
	<script>
  document.getElementById("grades-form").addEventListener("submit", async function (e) {
    e.preventDefault();

    const submitButton = this.querySelector("button[type='submit']");

    submitButton.disabled = true;
    submitButton.classList.remove("hover:bg-green-700");
    submitButton.classList.add("cursor-progress");

    const classId = document.getElementById("class_id").value;
    const termId = document.getElementById("term_id").value;
    const grades = [];

    document.querySelectorAll(".student-row").forEach(row => {
      const studentId = row.dataset.studentId;
      const studentGrades = { student_id: studentId, grades: [] };

      row.querySelectorAll(".score-input").forEach(scoreInput => {
        const subjectId = scoreInput.dataset.subjectId;
        const score = parseFloat(scoreInput.value) || 0;
        const remarkInput = row.querySelector(`.remark-input[data-subject-id="${subjectId}"]`);
        const remark = remarkInput ? remarkInput.value.trim() : "";

        studentGrades.grades.push({
          subject_id: subjectId,
          score: score,
          remark: remark
        });
      });

      grades.push(studentGrades);
    });

    const payload = {
      class_id: classId,
      term_id: termId,
      grades: grades
    };

    try {
      const response = await fetch("/grades/submit", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(payload)
      });

      const popover = document.getElementById("grades-popover");
      const message = document.getElementById("grades-popover-message");

      if (response.status === 201) {
        message.textContent = "✅ Grades saved successfully!";
        popover.classList.add("show");
        popover.showPopover();
      } else {
        message.textContent = "❌ Failed to save grades. Please try again.";
        popover.classList.add("show");
        popover.showPopover();
      }

      setTimeout(() => {
        popover.classList.add("hide");
        setTimeout(() => {
          popover.classList.remove("show", "hide");
          popover.hidePopover();
        }, 500);
      }, 3000);
    } catch (error) {
      const popover = document.getElementById("grades-popover");
      const message = document.getElementById("grades-popover-message");
      message.textContent = "⚠️ An error occurred!";
      popover.classList.add("show");
      popover.showPopover();

      setTimeout(() => {
        popover.classList.add("hide");
        setTimeout(() => {
          popover.classList.remove("show", "hide");
          popover.hidePopover();
        }, 500);
      }, 3000);
    } finally {
      // Re-enable the button and revert its style
      submitButton.disabled = false;
      submitButton.classList.remove("cursor-progress");
      submitButton.classList.add("hover:bg-green-700");
    	}
  	});
	</script>
}
